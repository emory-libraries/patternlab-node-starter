////
/// @group brandy-strings
////

/// Replaces all instances of a search string with a replacement string
///
/// @author Hugo Giraudel
/// @requires {function} is-string
/// @requires {function} is-null
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @param {string} $replace [''] - The string to be used as a replacement
/// @returns {string}
/// @throws 'Function `str-replace` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-replace` expects a string for argument `$search` but #{type-of($search)} was given.'
/// @throws 'Function `str-replace` expects a string for argument `$replace` but #{type-of($replace)} was given.'
@function str-replace( $string, $search, $replace: '' ){
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-replace` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($search) ) {
    
    @error 'Function `str-replace` expects a string for argument `$search` but #{type-of($search)} was given.';
    
  }
  
  @if( not is-string($replace) ) {
    
    @error 'Function `str-replace` expects a string for argument `$replace` but #{type-of($replace)} was given.';
    
  }
    
  $index: str-index($string, $search);
    
  @if( not is-null($index) ) {

    $before: str-slice( $string, 1, $index - 1 );
    $after: str-slice($string, $index + str-length($search));

    @return $before + $replace + str-replace($after, $search, $replace);

  }
    
  @return $string;
  
}

/// Splits a string into a list
///
/// @requires {function} is-string
/// @requires {function} is-null
/// @requires {function} char-at
/// @param {string} $string - The string to be worked on
/// @param {string} $delimiter [','] - The string delimiter
/// @returns {list}
/// @throws 'Function `str-split` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-split` expects a string for argument `$delimiter` but #{type-of($delimiter)} was given.'
@function str-split( $string, $delimiter: ',' ){
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-split` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($delimiter) ) {
    
    @error 'Function `str-split` expects a string for argument `$delimiter` but #{type-of($delimiter)} was given.';
    
  }
    
  $list: ();
  
  @if( $delimiter == '' ) {
    
    @for $i from 1 through str-length($string) {
      
      $list: append($list, char-at($string, $i));
      
    }
    
  } 
  
  @else {
    
    $index: str-index($string, $delimiter);
    
    @while ( not is-null($index) ) {

      $item: str-slice($string, 1, $index - 1);

      $list: append($list, $item);

      $string: str-slice($string, $index + 1);

      $index: str-index($string, $delimiter);

    }
    
    $list: append($list, $string);
    
  }

  @return $list;
  
}

/// Removes extra characters from the start and end of a string
///
/// @requires {function} is-string
/// @requires {function} is-list
/// @requires {function} str-first
/// @requires {function} str-last
/// @requires {function} is-null
/// @param {string} $string - The string to be worked on
/// @param {string | list} $characters [' '] - One or more characters to be trimmed
/// @returns {string}
/// @throws 'Function `str-trim` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-trim` expects a string or list for argument `$characters` but #{type-of($characters)} was given.'
@function str-trim( $string, $characters: ' ' ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-trim` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($characters) and not is-list($characters) ) {
    
    @error 'Function `str-trim` expects a string or list for argument `$characters` but #{type-of($characters)} was given.';
    
  }
  
  $start: 1;
  $stop: str-length($string);
  
  $first: str-first($string);
  $last: str-last($string);
    
  @while( not is-null(index($characters, $first)) ) {

    $start: $start + 1;

    $first: str-first(str-slice($string, $start));

  }

  @while( not is-null(index($characters, $last)) ) { 

    $stop: $stop - 1;

    $last: str-last(str-slice($string, 1, $stop));

  }

  @return str-slice($string, $start, $stop);
  
}

/// Removes extra characters from the end of a string
///
/// @requires {function} is-string
/// @requires {function} is-list
/// @requires {function} str-last
/// @requires {function} is-null
/// @param {string} $string - The string to be worked on
/// @param {string | list} $characters [' '] - One or more characters to be trimmed
/// @returns {string}
/// @throws 'Function `str-trim-right` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-trim-right` expects a string or list for argument `$characters` but #{type-of($characters)} was given.'
@function str-trim-right( $string, $characters: ' ' ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-trim-right` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($characters) and not is-list($characters) ) {
    
    @error 'Function `str-trim-right` expects a string or list for argument `$characters` but #{type-of($characters)} was given.';
    
  }
  
  $start: 1;
  $stop: str-length($string);
  
  $last: str-last($string);
  
  @while( not is-null(index($characters, $last)) ) { 

    $stop: $stop - 1;

    $last: str-last(str-slice($string, 1, $stop));

  }
  
  @return str-slice($string, $start, $stop);
  
}

/// Removes extra characters from the start of a string
///
/// @requires {function} is-string
/// @requires {function} is-list
/// @requires {function} str-first
/// @requires {function} is-null
/// @param {string} $string - The string to be worked on
/// @param {string | list} $characters [' '] - One or more characters to be trimmed
/// @returns {string}
/// @throws 'Function `str-trim-left` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-trim-left` expects a string or list for argument `$characters` but #{type-of($characters)} was given.'
@function str-trim-left( $string, $characters: ' ' ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-trim-left` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($characters) and not is-list($characters) ) {
    
    @error 'Function `str-trim-left` expects a string or list for argument `$characters` but #{type-of($characters)} was given.';
    
  }
  
  $start: 1;
  $stop: str-length($string);
  
  $first: str-first($string);
    
  @while( not is-null(index($characters, $first)) ) { 

    $start: $start + 1;

    $first: str-first(str-slice($string, $start));

  }
  
  @return str-slice($string, $start, $stop);
  
}

/// Determines if a string contains another string
///
/// @requires {function} is-string
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @returns {string}
/// @throws 'Function `str-contains` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-contains` expects a string for argument `$search` but #{type-of($search)} was given.'
@function str-contains( $string, $search ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-contains` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($search) ) {
    
    @error 'Function `str-contains` expects a string for argument `$search` but #{type-of($search)} was given.';
    
  }
  
  @return str-index($string, $search) != null;
  
}

/// Determines if a string starts with another string
///
/// @requires {function} is-string
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @returns {string}
/// @throws 'Function `str-starts-with` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-starts-with` expects a string for argument `$search` but #{type-of($search)} was given.'
@function str-starts-with( $string, $search ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-contains` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($search) ) {
    
    @error 'Function `str-contains` expects a string for argument `$search` but #{type-of($search)} was given.';
    
  }
  
  @return str-index($string, $search) == 1;
  
}

/// Determines if a string ends with another string
///
/// @requires {function} is-string
/// @param {string} $string - The string to be worked on
/// @param {string} $search - The string to be searched for
/// @returns {string}
/// @throws 'Function `str-ends-with` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-ends-with` expects a string for argument `$search` but #{type-of($search)} was given.'
@function str-ends-with( $string, $search ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-contains` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($search) ) {
    
    @error 'Function `str-contains` expects a string for argument `$search` but #{type-of($search)} was given.';
    
  }
  
  @return str-index($string, $search) == str-length($string) - str-length($search) + 1;
  
}

/// Reverses a string
///
/// @requires {function} is-string
/// @requires {function} char-at
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `str-reverse` on non-string `#{$string}`.'
@function str-reverse( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-reverse` on non-string `#{$string}`.';
    
  }
  
  $result: '';
  
  @for $i from (str-length($string) * -1) through -1 {
    
    $character: char-at($string, abs($i));
    
    $result: $result + $character;
    
  }
  
  @return $result;
  
}

/// Determines if a string is a palindrome
///
/// @requires {function} is-string
/// @param {string} $string - Some string
/// @returns {boolean}
/// @throws 'Cannot execute `str-is-palindrome` on non-string `#{$string}`.'
@function str-is-palindrome( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-is-palindrome` on non-string `#{$string}`.';
    
  }
  
  @return $string == str-reverse($string);
  
}

/// Determines if a string is a letter
///
/// @requires {function} is-string
/// @requires {function} char-at
/// @requires {variable} $brandy-letters
/// @param {string} $string - Some string
/// @returns {boolean}
/// @throws 'Cannot execute `str-is-letter` on non-string `#{$string}`.'
@function str-is-letter( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-is-letter` on non-string `#{$string}`.';
    
  }
  
  $insensitive: to-lower-case($string);
  
  @for $i from 1 through str-length($insensitive) {
    
    $letter: char-at($insensitive, $i);
    
    @if( not map-has-key($brandy-letters, $letter) ) { @return false; }
    
  }
  
  @return true;
  
}

/// Determines if a string is a symbol
///
/// @requires {function} is-string
/// @requires {function} char-at
/// @requires {function} contains
/// @requires {variable} $brandy-symbols
/// @param {string} $string - Some string
/// @returns {boolean}
/// @throws 'Cannot execute `str-is-symbol` on non-string `#{$string}`.'
@function str-is-symbol( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-is-symbol` on non-string `#{$string}`.';
    
  }
  
  @for $i from 1 through str-length($string) {
    
    $symbol: char-at($string, $i);
    
    @if( not contains($brandy-symbols, $symbol) ) { @return false; }
    
  }
  
  @return true;
  
}

/// Determines if a string is representative of some units
///
/// @requires {function} is-string
/// @requires {variable} $brandy-units
/// @param {string} $string - Some string representation of a unit
/// @returns {boolean}
/// @throws 'Cannot execute `str-is-unit` on non-string `#{$string}`.'
@function str-is-unit( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-is-unit` on non-string `#{$string}`.';
    
  }
  
  @return map-has-key($brandy-units, $string);
  
}

/// Determines if a string is a number
///
/// @requires {function} is-string
/// @requires {function} str-is-letter
/// @requires {function} str-is-symbol
/// @requires {function} str-is-unit
/// @requires {function} is-negative
/// @requires {function} char-at
/// @requires {variable} $brandy-numbers
/// @requires {function} str-tail
/// @requires {function} str-first
/// @param {string} $string - Some string
/// @returns {boolean}
/// @throws 'Cannot execute `str-is-number` on non-string `#{$string}`.'
@function str-is-number( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-is-number` on non-string `#{$string}`.';
    
  }
  
  $negative: if( str-first($string) == '-', true, false );
  
  @if( $negative ) { $string: str-tail($string); }
  
  $found-letters: false;
  
  $found-decimal: false;
  
  $digits: 0;
  
  $unit: null;
  
  $decimal-place: 0;
  
  @for $i from 1 through str-length($string) {
    
    $character: char-at($string, $i);
    
    @if( not $found-letters ) {
    
      @if( $character == '.' ) {
        
        @if( $found-decimal ) { @return false; }
        
        $found-decimal: true;
        
        $decimal-place: $i;
        
      }
      
      @else if( str-is-letter($character) or str-is-symbol($character) ) {
        
        @if( $i + 1 == $decimal-place + 1 ) { @return false; }
      
        $found-letters: true;
        
        $unit: $character;

      }
    
      @else {
        
        @if( not map-has-key($brandy-numbers, $character) ) { @return false; }
        
        $digits: $digits + 1;
      
      }
      
    }
    
    @else {
      
      $unit: $unit + $character;
      
    }
    
  }

  @if( not is-null($unit) ) {
    
    @if( $digits == 0 ) { @return false; }
    
    @return str-is-unit( $unit ); 
  
  }
  
  @return true;
  
}

/// Retrieves the substring between two characters
///
/// @requires {function} is-string
/// @requires {function} is-number
/// @requires {function} contains
/// @requires {function} is-list
/// @requires {function} is-null
/// @requires {function} char-at
/// @requires {function} first
/// @requires {function} last
/// @param {string} $string - Some string to be indexed
/// @param {string | list} $first - The first character to look for, optionally passed as a list where second item indicates occurrence index
/// @param {string | list} $last - The last character to look for, optionally passed as a list where second item indicates occurrence index
/// @param {boolean} $inclusive [true] - Whether or not the `$first` and `$last` characters should be included
/// @returns {string} - The string between `$first` and `$last` or `''` if no occurrence of `$last` follows `$first`
/// @throws 'Function `str-between` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-between` expects a string or list for argument `$first` but #{type-of($first)} was given.'
/// @throws 'Function `str-between` expects a string or list for argument `$last` but #{type-of($last)} was given.'
/// @throws 'Function `str-between` expects `true` or `false` for argument `$inclusive` but `#{($inclusive)}` was given.'
/// @throws 'Function `str-between` expects first argument in list `$first` to be a string but #{type-of(first($first))} given.'
/// @throws 'Function `str-between` expects first argument in list `$last` to be a string but #{type-of(first($last))} given.'
/// @throws 'Function `str-between` expects last argument in list `$first` to be a number but #{type-of(last($first))} given.'
/// @throws 'Function `str-between` expects last argument in list `$last` to be a number but #{type-of(last($last))} given.'
/// @throws 'Function `str-between` only permits one character for arguments `$first` and `$last`.'
@function str-between( $string, $first, $last, $inclusive: true ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-between` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($first) and not is-list($first) ) {
    
    @error 'Function `str-between` expects a string or list for argument `$first` but #{type-of($first)} was given.';
    
  }
  
  @if( not is-string($last) and not is-list($last) ) {
    
    @error 'Function `str-between` expects a string or list for argument `$last` but #{type-of($last)} was given.';
    
  }
  
  @if( not contains(true false, $inclusive) ) {
    
    @error 'Function `str-between` expects `true` or `false` for argument `$inclusive` but #{$inclusive} was given.';
    
  }
  
  @if( is-string($first) ) {
    
    @if( str-length($first) > 1 ) {
      
      @error 'Function `str-between` only permits one character for arguments `$first` and `$last`.'
      
    }
    
  }
  
  @if( is-string($last) ) {
    
    @if( str-length($last) > 1 ) {
      
      @error 'Function `str-between` only permits one character for arguments `$first` and `$last`.'
      
    }
    
  }
  
  @if( is-list($first) ) {
    
    @if( not is-string(first($first)) ) {
      
      @error 'Function `str-between` expects first argument in list `$first` to be a string but #{type-of(first($first))} given.'
      
    }
    
    @if( not is-number(last($first)) ) {
      
      @error 'Function `str-between` expects last argument in list `$first` to be a number but #{type-of(last($first))} given.'
      
    }
    
    @if( str-length(first($first)) > 1 ) {
      
      @error 'Function `str-between` only permits one character for arguments `$first` and `$last`.'
      
    }
    
  }
  
  @if( is-list($last) ) {
    
    @if( not is-string(first($last)) ) {
      
      @error 'Function `str-between` expects first argument in list `$last` to be a string but #{type-of(first($last))} given.'
      
    }
    
    @if( not is-number(last($last)) ) {
      
      @error 'Function `str-between` expects last argument in list `$last` to be a number but #{type-of(last($last))} given.'
      
    }
    
    @if( str-length(first($last)) > 1 ) {
      
      @error 'Function `str-between` only permits one character for arguments `$first` and `$last`.'
      
    }
    
  }
  
  $found-first: false;
  $found-last: false;
  $result: '';
  
  // Both are lists.
  @if( is-list($first) and is-list($last) ) {
    
    $first-index: last($first);
    $last-index: last($last);
    $first: first($first);
    $last: first($last);
    $first-occurs: 0;
    $first-occurrence: null;
    $last-occurs: 0;
    $last-occurrence: null;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( $character == $first ) { $first-occurs: $first-occurs + 1; }
      @if( not $was-first and $character == $last ) { $last-occurs: $last-occurs + 1; }
      @if( $first-occurs == $first-index ) { $first-occurrence: $i; $found-first: true; $was-first: true; }
      @if( $last-occurs == $last-index ) { $last-occurrence: $i; $found-last: true; }
      @if( $found-first and not $found-last ) { $result: $result + $character; }
      
    }
    
  }
  
  // Only first is list.
  @else if( is-list($first) ) {
    
    $index: last($first);
    $first: first($first);
    $occurs: 0;
    $occurrence: null;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( $character == $first ) { $occurs: $occurs + 1; }
      @if( not $was-first and $character == $last ) { $found-last: true; }
      @if( $occurs == $index ) { $occurrence: $i; $found-first: true; $was-first: true; }
      @if( $found-first and not $found-last ) { $result: $result + $character; }
      
    }
    
  }
  
  // Only last is list.
  @else if( is-list($last) ) {

    $index: last($last);
    $last: first($last);
    $occurs: 0;
    $occurrence: null;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( not $found-first and $character == $first ) { $found-first: true; $was-first: true; }
      @if( not $was-first and $character == $last ) { $occurs: $occurs + 1; }
      @if( $occurs == $index ) { $occurrence: $i; $found-last: true; }
      @if( $found-first and not $found-last ) { $result: $result + $character; }
      
    }
    
  }
  
  // Neither are lists.
  @else {
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( not $found-first and $character == $first ) { $found-first: true; $was-first: true; }
      @if( not $found-last and not $was-first and $character == $last ) { $found-last: true; }
      @if( $found-first and not $found-last ) { $result: $result + $character; }
      
    }
    
  }
  
  @return if( not $found-last, '', if($inclusive, $result + $last, str-slice($result, 2)) );
}

/// Extracts a character at the given index within a string
///
/// @requires {function} is-string
/// @requires {function} is-number
/// @param {string} $string - Some string
/// @param {number} $index - The index at which the character should be extracted
/// @returns {string}
/// @throws 'Function `char-at` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `char-at` expects a number for argument `$index` but #{type-of($index)} was given.'
@function char-at( $string, $index ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `char-at` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-number($index) ) {
    
    @error 'Function `char-at` expects a number for argument `$index` but #{type-of($index)} was given.';
    
  }
  
  $length: str-length($string);
  
  @if( $index > 0 and $index <= $length ) {
  
    @return str-slice($string, $index, $index);
    
  }
  
  @else if( $index < 0 and abs($index) <= $length ) {
    
    @return str-slice($string, $length + $index, $length + $index);
    
  }
  
  @else {
    
    @warn 'Cannot extract `char-at` for invalid index `#{$index}`.';
      
    @return $string;
    
  }
  
}

/// Extracts the characters at the given indices within a string
///
/// @requires {function} is-string
/// @requires {function} is-number
/// @requires {function} char-at
/// @param {string} $string - Some string
/// @param {arglist} $indices - One or more numeric indexes at which the character should be extracted
/// @returns {list}
/// @throws 'Function `chars-at` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `chars-at` expects a list of number for argument `$indices` but #{type-of($index)} was given.'
@function chars-at( $string, $indices... ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `chars-at` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  $result: ();
  
  @each $index in $indices {
    
    @if( not is-number($index) ) {
    
      @error 'Function `chars-at` expects a list of numbers for argument `$indices` but #{type-of($index)} was given.';

    }
    
    $result: append($result, char-at($string, $index));
    
  }
  
  @return $result;
  
}

/// Extracts the first character from a string
///
/// @requires {function} is-string
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `char-first` on non-string `#{$string}`.'
@function char-first( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `char-first` on non-string `#{$string}`.';
    
  }
  
  @return str-slice($string, 1, 1);
  
}

/// Extracts the last character from a string
///
/// @requires {function} is-string
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `char-last` on non-string `#{$string}`.'
@function char-last( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `char-last` on non-string `#{$string}`.';
    
  }
  
  @return str-slice($string, -1, -1);
  
}

/// Counts the number of characters between two characters within a string, optionally passing occurrence index
///
/// @requires {function} is-string
/// @requires {function} is-number
/// @requires {function} contains
/// @requires {function} is-list
/// @requires {function} is-null
/// @requires {function} char-at
/// @requires {function} first
/// @requires {function} last
/// @param {string} $string - Some string to be indexed
/// @param {string | list} $first - The first character to look for, optionally passed as a list where second item indicates occurrence index
/// @param {string | list} $last - The last character to look for, optionally passed as a list where second item indicates occurrence index
/// @param {boolean} $inclusive [true] - Whether or not the `$last` character should be counted
/// @returns {number} - The number of characters between `$first` and `$last` or `0` if no occurrence of `$last` follows `$first`
/// @throws 'Function `char-count-between` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `char-count-between` expects a string or list for argument `$first` but #{type-of($first)} was given.'
/// @throws 'Function `char-count-between` expects a string or list for argument `$last` but #{type-of($last)} was given.'
/// @throws 'Function `char-count-between` expects `true` or `false` for argument `$inclusive` but `#{($inclusive)}` was given.'
/// @throws 'Function `char-count-between` expects first argument in list `$first` to be a string but #{type-of(first($first))} given.'
/// @throws 'Function `char-count-between` expects first argument in list `$last` to be a string but #{type-of(first($last))} given.'
/// @throws 'Function `char-count-between` expects last argument in list `$first` to be a number but #{type-of(last($first))} given.'
/// @throws 'Function `char-count-between` expects last argument in list `$last` to be a number but #{type-of(last($last))} given.'
/// @throws 'Function `char-count-between` only permits one character for arguments `$first` and `$last`.'
@function chars-between( $string, $first, $last, $inclusive: true ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `char-count-between` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($first) and not is-list($first) ) {
    
    @error 'Function `char-count-between` expects a string or list for argument `$first` but #{type-of($first)} was given.';
    
  }
  
  @if( not is-string($last) and not is-list($last) ) {
    
    @error 'Function `char-count-between` expects a string or list for argument `$last` but #{type-of($last)} was given.';
    
  }
  
  @if( not contains(true false, $inclusive) ) {
    
    @error 'Function `char-count-between` expects `true` or `false` for argument `$inclusive` but #{$inclusive} was given.';
    
  }
  
  @if( is-string($first) ) {
    
    @if( str-length($first) > 1 ) {
      
      @error 'Function `char-count-between` only permits one character for arguments `$first` and `$last`.'
      
    }
    
  }
  
  @if( is-string($last) ) {
    
    @if( str-length($last) > 1 ) {
      
      @error 'Function `char-count-between` only permits one character for arguments `$first` and `$last`.'
      
    }
    
  }
  
  @if( is-list($first) ) {
    
    @if( not is-string(first($first)) ) {
      
      @error 'Function `char-count-between` expects first argument in list `$first` to be a string but #{type-of(first($first))} given.'
      
    }
    
    @if( not is-number(last($first)) ) {
      
      @error 'Function `char-count-between` expects last argument in list `$first` to be a number but #{type-of(last($first))} given.'
      
    }
    
    @if( str-length(first($first)) > 1 ) {
      
      @error 'Function `char-count-between` only permits one character for arguments `$first` and `$last`.'
      
    }
    
  }
  
  @if( is-list($last) ) {
    
    @if( not is-string(first($last)) ) {
      
      @error 'Function `char-count-between` expects first argument in list `$last` to be a string but #{type-of(first($last))} given.'
      
    }
    
    @if( not is-number(last($last)) ) {
      
      @error 'Function `char-count-between` expects last argument in list `$last` to be a number but #{type-of(last($last))} given.'
      
    }
    
    @if( str-length(first($last)) > 1 ) {
      
      @error 'Function `char-count-between` only permits one character for arguments `$first` and `$last`.'
      
    }
    
  }
  
  $found-first: false;
  $found-last: false;
  $between: 0;
  
  // Both are lists.
  @if( is-list($first) and is-list($last) ) {
    
    $first-index: last($first);
    $last-index: last($last);
    $first: first($first);
    $last: first($last);
    $first-occurs: 0;
    $first-occurrence: null;
    $last-occurs: 0;
    $last-occurrence: null;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( $character == $first ) { $first-occurs: $first-occurs + 1; }
      @if( not $was-first and $character == $last ) { $last-occurs: $last-occurs + 1; }
      @if( $first-occurs == $first-index ) { $first-occurrence: $i; $found-first: true; $was-first: true; }
      @if( $last-occurs == $last-index ) { $last-occurrence: $i; $found-last: true; }
      @if( $found-first and not $found-last ) { $between: $between + 1; }
      
    }
    
  }
  
  // Only first is list.
  @else if( is-list($first) ) {
    
    $index: last($first);
    $first: first($first);
    $occurs: 0;
    $occurrence: null;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( $character == $first ) { $occurs: $occurs + 1; }
      @if( not $was-first and $character == $last ) { $found-last: true; }
      @if( $occurs == $index ) { $occurrence: $i; $found-first: true; $was-first: true; }
      @if( $found-first and not $found-last ) { $between: $between + 1; }
      
    }
    
  }
  
  // Only last is list.
  @else if( is-list($last) ) {

    $index: last($last);
    $last: first($last);
    $occurs: 0;
    $occurrence: null;
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( not $found-first and $character == $first ) { $found-first: true; $was-first: true; }
      @if( not $was-first and $character == $last ) { $occurs: $occurs + 1; }
      @if( $occurs == $index ) { $occurrence: $i; $found-last: true; }
      @if( $found-first and not $found-last ) { $between: $between + 1; }
      
    }
    
  }
  
  // Neither are lists.
  @else {
    
    @for $i from 1 through str-length($string) {
      
      $character: char-at($string, $i);
      $was-first: false;
      
      @if( not $found-first and $character == $first ) { $found-first: true; $was-first: true; }
      @if( not $found-last and not $was-first and $character == $last ) { $found-last: true; }
      @if( $found-first and not $found-last ) { $between: $between + 1; }
      
    }
    
  }
  
  @return if( not $found-last, 0, if($inclusive, $between + 1, $between - 1) );
  
}

/// Counts the number of characters in a string
///
/// @requires {function} is-string
/// @param {string} $string - Some string to be counted
/// @returns {number}
/// @throws 'Cannot execute `char-count` on non-string `#{$string}`.'
@function char-count( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `char-count` on non-string `#{$string}`.';
    
  }
  
  @return str-length($count);
  
}

/// Counts the number of words in a string
///
/// @requires {function} is-string
/// @requires {function} is-string
/// @requires {function} str-split
/// @param {string} $string - Some string to be counted
/// @returns {number}
/// @throws 'Cannot execute `str-word-count` on non-string `#{$string}`.'
@function str-word-count( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-word-count` on non-string `#{$string}`.';
    
  }
  
  @return length(str-split($string, ' '));
  
}

/// Extracts the first character from a string
///
/// @requires {function} is-string
/// @alias char-first
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `str-first` on non-string `#{$string}`.'
@function str-first( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-first` on non-string `#{$string}`.';
    
  }
  
  @return char-first($string);
  
}

/// Extracts the last character from a string
///
/// @requires {function} is-string
/// @alias char-last
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `str-last` on non-string `#{$string}`.'
@function str-last( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-last` on non-string `#{$string}`.';
    
  }
  
  @return char-last($string);
  
}

/// Retrieves all characters in a string except for the first
///
/// @requires {function} is-string
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `str-tail` on non-string `#{$string}`.'
@function str-tail( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-tail` on non-string `#{$string}`.';
    
  }
  
  @return str-slice($string, 2);
  
}

/// Retrieves all characters in a string except for the last
///
/// @requires {function} is-string
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `str-head` on non-string `#{$string}`.'
@function str-head( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-head` on non-string `#{$string}`.';
    
  }
  
  @return str-slice($string, 1, -2);
  
}

/// Looks up the last index of a string within the given string
///
/// @requires {function} is-string
/// @requires {function} char-at
/// @param {string} $string - Some string to be searched on
/// @param {string} $needle - Some string to be searched for
/// @returns {string | null}
/// @throws 'Function `str-last-index` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-last-index` expects a string for argument `$needle` but #{type-of($needle)} was given.'
@function str-last-index( $string, $needle ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-last-index` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($needle) ) {
    
    @error 'Function `str-last-index` expects a string for argument `$needle` but #{type-of($needle)} was given.';
    
  }
  
  $result: str-index($string, $needle);
  
  @for $i from $result through str-length($string) {
    
    @if( char-at($string, $i) == $needle ) { $result: $i; }
    
  }
  
  @return $result;
  
}

/// Pads a string on the given direction with the `$filler` until preferred `$length` is reached
///
/// @requires {function} is-string
/// @requires {function} is-number
/// @requires {function} contains
/// @param {string} $string - Some string to be padded
/// @param {string} $length [str-length($string) + 1] - The preferred length of the string
/// @param {string} $filler [' '] - The string to used as the filler
/// @param {string} $direction [left] - The direction to add the padding
/// @returns {string}
/// @throws 'Function `str-pad` expects a string for argument `$string` but #{type-of($string)} was given.'
/// @throws 'Function `str-pad` expects a string for argument `$filler` but #{type-of($filler)} was given.'
/// @throws 'Function `str-pad` expects a number for argument `$length` but #{type-of($length)} was given.'
/// @throws 'Function `str-pad` expects `left` or `right` for argument `$direction` but `#{($direction)}` was given.'
@function str-pad( $string, $length: str-length($string) + 1, $filler: ' ', $direction: left ) {
  
  @if( not is-string($string) ) {
    
    @error 'Function `str-pad` expects a string for argument `$string` but #{type-of($string)} was given.';
    
  }
  
  @if( not is-string($filler) ) {
    
    @error 'Function `str-pad` expects a string for argument `$filler` but #{type-of($filler)} was given.';
    
  }
  
  @if( not is-number($length) ) {
    
    @error 'Function `str-pad` expects a number for argument `$length` but #{type-of($length)} was given.';
    
  }
  
  @if( not contains(left right, $direction) ) {
    
    @error 'Function `str-pad` expects `left` or `right` for argument `$direction` but #{($direction)} was given.';
    
  }
  
  $result: $string;
  
  $index: 1;
  
  @if( $length > str-length($string) ) {
    
    @while( str-length($result) < $length ) {
      
      $remaining: $length - str-length($result);
      
      $filler: if( $remaining < str-length($filler), str-slice($filler, 1 $remaining), $filler);
      
      @if( $direction == right ) { $result: $result + $filler; }
      @else { $result: str-insert($result, $filler, $index); $index: $index + str-length($filler); }
      
    }
    
  }
  
  @return $result;
  
}

/// Shuffle all characters within a string
///
/// @requires {function} is-string
/// @requires {function} str-split
/// @requires {function} shuffle
/// @requires {function} glue
/// @param {string} $string - Some string to be shuffled
/// @returns {string}
/// @throws 'Cannot execute `str-shuffle` on non-string `#{$string}`.'
@function str-shuffle( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `str-shuffle` on non-string `#{$string}`.';
    
  }
  
  @return glue(shuffle(str-split($string, '')), '');
  
}

/// Capitalizes the first letter in a string
///
/// @requires {function} is-string
/// @requires {function} str-first
/// @requires {function} str-tail
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `to-upper-case-first` on non-string `#{$string}`.'
@function to-upper-case-first( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `to-upper-case-first` on non-string `#{$string}`.';
    
  }
  
  @return to-upper-case(str-first($string)) + str-tail($string);
  
}

/// Lowercases the first letter in a string
///
/// @requires {function} is-string
/// @requires {function} str-first
/// @requires {function} str-tail
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `to-lower-case-first` on non-string `#{$string}`.'
@function to-lower-case-first( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `to-lower-case-first` on non-string `#{$string}`.';
    
  }
  
  @return to-lower-case(str-first($string)) + str-tail($string);
  
}

/// Capitalizes the first letter of each word in a string
///
/// @requires {function} is-string
/// @requires {function} str-first
/// @requires {function} str-tail
/// @requires {function} str-split
/// @requires {function} glue
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `to-capitalize` on non-string `#{$string}`.'
@function to-capitalize( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `to-capitalize` on non-string `#{$string}`.';
    
  }
  
  $words: str-split($string, ' ');
  
  @each $word in $words {
    
    $n: index($words, $word);
    
    $words: set-nth($words, $n, to-upper-case(str-first($word)) + str-tail($word));
    
  }
  
  @return glue($words, ' ');
  
}

/// Titlecases a string, ignoring words in `$brandy-title-blacklist`
///
/// @requires {function} is-string
/// @requires {function} str-first
/// @requires {function} str-last
/// @requires {function} str-tail
/// @requires {function} str-split
/// @requires {function} glue
/// @requires {function} contains
/// @requires {variable} $brandy-title-blacklist
/// @param {string} $string - Some string
/// @returns {string}
/// @throws 'Cannot execute `to-title-case` on non-string `#{$string}`.'
@function to-title-case( $string ) {
  
  @if( not is-string($string) ) {
    
    @error 'Cannot execute `to-title-case` on non-string `#{$string}`.';
    
  }
  
  $words: str-split($string, ' ');
  
  $after-colon: false;
  
  @each $word in $words {
    
    // Get index.
    $n: index($words, $word);
    
    // Handle first word.
    @if( $n == 1 ) {
      
      $words: set-nth($words, $n, to-upper-case(str-first($word)) + str-tail($word));
      
    }
    
    // Handle words preceeded by a colon.
    @else if( $after-colon ) {
      
      $words: set-nth($words, $n, to-upper-case(str-first($word)) + str-tail($word));
      
      $after-colon: false;
      
    }
    
    // Otherwise, handle only non-blacklisted words.
    @else if( not contains($brandy-title-blacklist, $word) ) {
    
      $words: set-nth($words, $n, to-upper-case(str-first($word)) + str-tail($word));
      
    }
    
    // Look for a colon at the end of the current word.
    @if( str-last($word) == ':' ) { $after-colon: true; }
    
  }
  
  @return glue($words, ' ');
  
}
