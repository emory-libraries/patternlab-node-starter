////
/// @group brandy-selects
////

/// To build a list of selectors with optional modifier(s)
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-string
/// @param {string | list | arglist} $selectors - One or more selectors
/// @param {string | list | arglist} $modifiers - One or more modifiers to be added to the selector(s)
/// @returns {list}
/// @throws 'Function `selector` expects a string or list for argument `$selectors` but `#{type-of($selectors)}` was given.'
/// @throws 'Function `selector` expects a string or list for argument `$modifiers` but `#{type-of($modifiers)}` was given.'
@function selector($selectors, $modifiers: ()){
  
  @if( not is-list($selectors) and not is-arglist($selectors) and not is-string($selectors) ) {
    
    @error 'Function `selector` expects a string or list for argument `$selectors` but `#{type-of($selectors)}` was given.';
    
  }
  
  @if( not is-list($modifiers) and not is-arglist($modifiers) and not is-string($modifiers) ) {
    
    @error 'Function `selector` expects a string or list for argument `$modifiers` but `#{type-of($modifiers)}` was given.';
    
  }

  $result: ();

  @each $selector in $selectors {
    
    @if( length($modifiers) > 0 ) {
    
      @each $modifier in $modifiers {

        $result: append($result, unquote('#{$selector}#{$modifier}'), comma);

      }
      
    }
    
    @else { $result: append($result, unquote('#{$selector}'), comma); }
    
  }

  @return $result;

}