////
/// @group brandy-test
////

/// Enables unit testing of Sass functions
///
/// @requires {function} cast-string
/// @param {string} $function - The name of some function to be tested 
/// @param {map} $tests - One or more tests to be run
/// @param {boolean} $arglist - Whether the arguments passed into the test are in the form of an `arglist` or `list` otherwise
@mixin test( $function, $tests, $arglist: true ) {
  
  $length: length($tests);
  $failed: 0;
  $passed: 0;
  $index: 1;
  $break: '\a ';
  
  $results: '#{$break}#{$break}Started: Testing function `#{$function}`#{$break}----------------------------------#{$break}';
  
  @each $arguments, $expected in $tests {

    $result: if( $arglist, call(get-function($function), $arguments...), call(get-function($function), $arguments) );

    @if ( $result == $expected or cast-string($result) == cast-string($expected) ) { 
        
      $results: $results + 'Test #{$index} of #{$length}... ✔#{$break}';
      $passed: $passed + 1;
      
    }
    
    @else {
  
      $results: $results + 'Test #{$index} of #{$length}... ✘#{$break}' + 
                           '  Expected: `#{cast-string($expected)}`#{$break}' +
                           '  Result: `#{cast-string($result)}`#{$break}'; 
      $failed: $failed + 1;
      
    }
    
    $index: $index + 1;
    
  }
    
  $results: $results + '----------------------------------#{$break}' +
            'Finished: #{$failed} out of #{$length} test(s) failing.#{$break}';
  
  @debug quote($results);
  
}

/// Enables comparative testing of Sass variables
///
/// @requires {function} cast-string
/// @param {string} $variable - The name of some function to be tested 
/// @param {map} $tests - One or more tests to be run
/// @param {string} $comp - The name of comparative function to use for comparison
@mixin compare( $tests, $comp: 'eq' ) {
  
  $length: length($tests);
  $failed: 0;
  $passed: 0;
  $index: 1;
  $break: '\a ';
  
  $comparisons: (
    'eq': 'equality',
    'neq': 'inequality',
    'aeq': 'almost equality',
    'gt': 'greatness',
    'gteq': 'greatness or equality',
    'lt': 'leastness',
    'lteq': 'leastness or equality'
  );
  
  $results: '#{$break}#{$break}Testing for `#{map-get($comparisons, $comp)}`#{$break}----------------------------------#{$break}';
  
  @each $variable, $comparison in $tests {

    $result: call(get-function($comp), $variable, $comparison);

    @if ( $result == true ) { 
        
      $results: $results + 'Test #{$index} of #{$length}... ✔#{$break}';
      $passed: $passed + 1;
      
    }
    
    @else {
  
      $results: $results + 'Test #{$index} of #{$length}... ✘#{$break}'; 
      $failed: $failed + 1;
      
    }
    
    $index: $index + 1;
    
  }
    
  $results: $results + '----------------------------------#{$break}' +
            'Finished: #{$failed} out of #{$length} test(s) failing.#{$break}';
  
  @debug quote($results);
  
}