////
/// @group brandy-comps
////

/// Creates a responsive grid system on the fly based on the given configurations
///
/// @requires {variable} $brandy-screens-map
/// @requires {function} first
/// @requires {function} unit-to-digit
/// @requires {function} build-media
/// @param {string} $name ['grid'] - The class name used for the grid system
/// @param {string} $items ['griditem'] - The class name used for each item within the grid system
/// @param {number} $columns [12] - The maximum number of columns in the grid system
/// @param {number} $rows [100] - The maximum number of rows in the grid system
/// @param {number} $gutter [25] - The maximum gutter size for the grid system
/// @param {list} $units ['px' 'em' 'pct'] - One or more units that the grid system supports, used to calculate gutter from class declarations
/// @param {list} $breaks [$brandy-screens-map] - The recognized breakpoints at which the grid system will be responsive
@mixin grid( $name: 'grid', $items: 'griditem', $columns: 12, $rows: 100, $gutter: 25, $units: 'px' 'em' 'pct', $breaks: $brandy-screens-map ) {
    
  $default-unit: first($units);
  
  .#{$name} {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    grid-gap: 0;
  
    // Setup columns.
    @for $column from 1 through $columns {
  
      &.cols-#{$column} { grid-template-columns: repeat($column, 1fr); }
  
      // Setup column spans.
      @for $col from 1 through $column {
  
        .#{$items}.col-span-#{$col} { grid-column-end: span $col; }
        .#{$items}.col-start-#{$col} { grid-column-start: $col; }
        .#{$items}.col-end-#{$col} { grid-column-end: $col + 1; }
  
      } // end @for $col
  
    } // end @for $columns
  
    // Setup gutters.
    @for $gap from 0 through $gutter {
  
      &.gutter-#{$gap} { grid-gap: ($gap * unit-to-digit($default-unit)); }
      &.gutter-col-#{$gap} { grid-column-gap: ($gap * unit-to-digit($default-unit)); }
      &.gutter-row-#{$gap} { grid-row-gap: ($gap * unit-to-digit($default-unit)); }
  
      @each $unit in $units {
  
        &.gutter-unit-#{$unit}.gutter-#{$gutter} { grid-gap: ($gutter * unit-to-digit($unit)); }
        &.gutter-unit-#{$unit}.gutter-col-#{$gutter} { grid-column-gap: ($gutter * unit-to-digit($unit)); }
        &.gutter-unit-#{$unit}.gutter-row-#{$gutter} { grid-row-gap: ($gutter * unit-to-digit($unit)); }
  
      }
  
    } // end @for $gutter
  
    // Setup row spans.
    @for $row from 1 through $rows {
  
      .#{$items}.row-span-#{$row} { grid-row-end: span $row; }
      .#{$items}.row-start-#{$row} { grid-row-start: $row; }
      .#{$items}.row-end-#{$row} { grid-row-end: $row; }
  
    } // end @for $rows
  
    // Make grids responsive.
    @each $screen, $setting in $breaks {
  
      // Use breakpoint if available.
      @if( mixin-exists(breakpoint) ){
       
        @include breakpoint( $setting ){
  
          // Setup columns.
          @for $column from 1 through $columns {
  
            &.#{$screen}-cols-#{$column} { grid-template-columns: repeat($column, 1fr); }

            // Setup column spans.
            @for $col from 1 through $column {
  
              .#{$items}.#{$screen}-col-span-#{$col} { grid-column-end: span $col; }
              .#{$items}.#{$screen}-col-start-#{$col} { grid-column-start: $col; }
              .#{$items}.#{$screen}-col-end-#{$col} { grid-column-end: $col + 1; }
  
            } // end @for $col
  
          } // end @for $columns
  
          // Setup gutters.
          @for $gap from 0 through $gutter {
  
            &.#{$screen}-gutter-#{$gutter} { grid-gap: ($gutter * unit-to-digit($default-unit)); }
            &.#{$screen}-gutter-col-#{$gutter} { grid-column-gap: ($gutter * unit-to-digit($default-unit)); }
            &.#{$screen}-gutter-row-#{$gutter} { grid-row-gap: ($gutter * unit-to-digit($default-unit)); }
  
            @each $unit in $units {
  
              &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-#{$gutter} { grid-gap: ($gutter * unit-to-digit($unit)); }
              &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-col-#{$gutter} { grid-column-gap: ($gutter * unit-to-digit($unit)); }
              &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-row-#{$gutter} { grid-row-gap: ($gutter * unit-to-digit($unit)); }
  
            }
  
          } // end @for $gutter
  
          // Setup row spans.
          @for $row from 1 through $rows {
  
            .#{$items}.#{$screen}-row-span-#{$row} { grid-row-end: span $row; }
            .#{$items}.#{$screen}-row-start-#{$row} { grid-row-start: $row; }
            .#{$items}.#{$screen}-row-end-#{$row} { grid-row-end: $row; }
  
          } // end @for $rows
  
          // Allow items to be hidden.
          .#{$items}.#{$screen}-hidden { display: none; }
  
        } // end @include breakpoint
      
      } // end @if mixin-exists(breakpoint)
  
      // Default to media queries.
      @else {
        
        // Interpret the screen breakpoint.
        $setting: build-media($setting);
        
        // Breakout max-width and min-width.
        $max-width: map-get($setting, 'max-width');
        $min-width: map-get($setting, 'min-width');
        
        @if( $max-width != false and $min-width != false ) {
          @media (max-width: $max-width) and (min-width: $min-width) {
            
            // Setup columns.
            @for $column from 1 through $columns {

              &.#{$screen}-cols-#{$column} { grid-template-columns: repeat($column, 1fr); }

              // Setup column spans.
              @for $col from 1 through $column {

                .#{$items}.#{$screen}-col-span-#{$col} { grid-column-end: span $col; }
                .#{$items}.#{$screen}-col-start-#{$col} { grid-column-start: $col; }
                .#{$items}.#{$screen}-col-end-#{$col} { grid-column-end: $col + 1; }

              } // end @for $col

            } // end @for $columns

            // Setup gutters.
            @for $gap from 0 through $gutter {

              &.#{$screen}-gutter-#{$gutter} { grid-gap: ($gutter * unit-to-digit($default-unit)); }
              &.#{$screen}-gutter-col-#{$gutter} { grid-column-gap: ($gutter * unit-to-digit($default-unit)); }
              &.#{$screen}-gutter-row-#{$gutter} { grid-row-gap: ($gutter * unit-to-digit($default-unit)); }

              @each $unit in $units {

                &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-#{$gutter} { grid-gap: ($gutter * unit-to-digit($unit)); }
                &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-col-#{$gutter} { grid-column-gap: ($gutter * unit-to-digit($unit)); }
                &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-row-#{$gutter} { grid-row-gap: ($gutter * unit-to-digit($unit)); }

              }

            } // end @for $gutter

            // Setup row spans.
            @for $row from 1 through $rows {

              .#{$items}.#{$screen}-row-span-#{$row} { grid-row-end: span $row; }
              .#{$items}.#{$screen}-row-start-#{$row} { grid-row-start: $row; }
              .#{$items}.#{$screen}-row-end-#{$row} { grid-row-end: $row; }

            } // end @for $rows

            // Allow items to be hidden.
            .#{$items}.#{$screen}-hidden { display: none; }
            
          } // end @media max-width and min-width
        } // end @if max-width and min-width
        @else if( $max-width != false ) {
          @media (max-width: $max-width) {
            
            // Setup columns.
            @for $column from 1 through $columns {

              &.#{$screen}-cols-#{$column} { grid-template-columns: repeat($column, 1fr); }

              // Setup column spans.
              @for $col from 1 through $column {

                .#{$items}.#{$screen}-col-span-#{$col} { grid-column-end: span $col; }
                .#{$items}.#{$screen}-col-start-#{$col} { grid-column-start: $col; }
                .#{$items}.#{$screen}-col-end-#{$col} { grid-column-end: $col + 1; }

              } // end @for $col

            } // end @for $columns

            // Setup gutters.
            @for $gap from 0 through $gutter {

              &.#{$screen}-gutter-#{$gutter} { grid-gap: ($gutter * unit-to-digit($default-unit)); }
              &.#{$screen}-gutter-col-#{$gutter} { grid-column-gap: ($gutter * unit-to-digit($default-unit)); }
              &.#{$screen}-gutter-row-#{$gutter} { grid-row-gap: ($gutter * unit-to-digit($default-unit)); }

              @each $unit in $units {

                &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-#{$gutter} { grid-gap: ($gutter * unit-to-digit($unit)); }
                &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-col-#{$gutter} { grid-column-gap: ($gutter * unit-to-digit($unit)); }
                &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-row-#{$gutter} { grid-row-gap: ($gutter * unit-to-digit($unit)); }

              }

            } // end @for $gutter

            // Setup row spans.
            @for $row from 1 through $rows {

              .#{$items}.#{$screen}-row-span-#{$row} { grid-row-end: span $row; }
              .#{$items}.#{$screen}-row-start-#{$row} { grid-row-start: $row; }
              .#{$items}.#{$screen}-row-end-#{$row} { grid-row-end: $row; }

            } // end @for $rows

            // Allow items to be hidden.
            .#{$items}.#{$screen}-hidden { display: none; }
            
          } // end @media max-width
        } // end @if max-width
        @else if( $min-width != false ) {
          @media (min-width: $min-width) {
            
            // Setup columns.
            @for $column from 1 through $columns {

              &.#{$screen}-cols-#{$column} { grid-template-columns: repeat($column, 1fr); }

              // Setup column spans.
              @for $col from 1 through $column {

                .#{$items}.#{$screen}-col-span-#{$col} { grid-column-end: span $col; }
                .#{$items}.#{$screen}-col-start-#{$col} { grid-column-start: $col; }
                .#{$items}.#{$screen}-col-end-#{$col} { grid-column-end: $col + 1; }

              } // end @for $col

            } // end @for $columns

            // Setup gutters.
            @for $gap from 0 through $gutter {

              &.#{$screen}-gutter-#{$gutter} { grid-gap: ($gutter * unit-to-digit($default-unit)); }
              &.#{$screen}-gutter-col-#{$gutter} { grid-column-gap: ($gutter * unit-to-digit($default-unit)); }
              &.#{$screen}-gutter-row-#{$gutter} { grid-row-gap: ($gutter * unit-to-digit($default-unit)); }

              @each $unit in $units {

                &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-#{$gutter} { grid-gap: ($gutter * unit-to-digit($unit)); }
                &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-col-#{$gutter} { grid-column-gap: ($gutter * unit-to-digit($unit)); }
                &.#{$screen}-gutter-unit-#{$unit}.#{$screen}-gutter-row-#{$gutter} { grid-row-gap: ($gutter * unit-to-digit($unit)); }

              }

            } // end @for $gutter

            // Setup row spans.
            @for $row from 1 through $rows {

              .#{$items}.#{$screen}-row-span-#{$row} { grid-row-end: span $row; }
              .#{$items}.#{$screen}-row-start-#{$row} { grid-row-start: $row; }
              .#{$items}.#{$screen}-row-end-#{$row} { grid-row-end: $row; }

            } // end @for $rows

            // Allow items to be hidden.
            .#{$items}.#{$screen}-hidden { display: none; }
            
          } // end @media min-width
        } // end @if min-width
  
      }
  
    } // end @each $screen, $setting
  
  } // end .grid

}

/// Creates a burger icon using pseudo elements `:before` and `:after`
///
/// @author Joren Van Hee
/// @requires {variable} $brandy-dark-text
/// @requires {mixin} margin-y
/// @requires {function} first
/// @param {number} $width [100%] - The desired width of each bar within the burger icon
/// @param {number} $height [5px] - The desired height of each bar within the burger icon
/// @param {number} $gutter [5px] - The desired distance between bars within the burger icon
/// @param {color | list} $color [$brandy-dark-text] - The desired color(s) of each bar within the burger icon
/// @param {number} $radius [0] - The amount of border radius to add to each bar within the burger icon
/// @param {number} $transition [all .25s] - The transition to be added to the burger icon during transition effects
@mixin burger( $width: 100%, $height: 5px, $gutter: 5px, $color: $brandy-dark-text, $radius: 0, $transition: all .25s ) {
  
  position: relative;
  @include margin-y( $height + $gutter );
  
  &,
  &::before,
  &::after {
    display: block;
    width: $width;
    height: $height;
    @if( length($color) == 1 ) { background-color: $color; } @else { background-color: first($color); }
    @if( $radius != 0 ) { border-radius: $radius; }
    transition: $transition;
  }
  
  @if( length($color) > 1 ) {
    
    @for $i from 1 through length($color) {
      
      $c: nth($color, $i);
      
      @if( $i == 1 ) { &::before { background-color: $c; } }
      @if( $i == 2 ) { & { background-color: $c; } }
      @if( $i == 3 ) { &::after { background-color: $c; } }
      
    }
    
  }
  
  &::before,
  &::after {
    content: '';
    position: absolute;
  }
  
  &::before { top: -($height + $gutter); }
  &::after { top: ($height + $gutter); }
  
}

/// Allows further modification of the burger icon using `@content` directive. Intended for use with `burger` mixin.
///
/// @author Joren Van Hee
@mixin burger-mods() { &, &::before, &::after { @content; } }

/// Allows further modification of the top and bottom burger bars using `@content` directive. Intended for use with `burger` mixin.
///
/// @author Joren Van Hee
@mixin burger-buns() { &::before, &::after { @content; } }

/// Allows further modification of the top burger bar using `@content` directive. Intended for use with `burger` mixin.
///
/// @author Joren Van Hee
@mixin burger-top() { &::before { @content; } }

/// Allows further modification of the bottom burger bar using `@content` directive. Intended for use with `burger` mixin.
///
/// @author Joren Van Hee
@mixin burger-bottom() { &::after { @content; } }

/// Allows further modification of the middle burger bar using `@content` directive. Intended for use with `burger` mixin.
///
/// @author Joren Van Hee
@mixin burger-middle() {  & { @content; } }

/// Adds a transformation animation to a burger icon, turning it into a close icon (`X`)
///
/// @author Joren Van Hee
/// @param {color | null} $color [null] - The preferred color of the close icon
@mixin burger-to-close( $color: null ) {
  
  &: { background-color: transparent; }
  
  @if( is-color($color) ) { &::before, &::after { background-color: $color; } }
  
  &::before {
    top: 50%;
    transform: translatey(-50%) rotate(45deg);
  }
  
  &::after {
    top: 50%;
    transform: translatey(-50%) rotate(-45deg);
  }
  
}