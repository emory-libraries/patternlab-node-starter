////
/// @group brandy-fonts
////


/// Loads a font from [Google Fonts](//fonts.google.com)
///
/// @requires {function} first
/// @requires {function} tail
/// @requires {function} is-list
/// @requires {function} is-number
/// @requires {function} glue
/// @param {arglist} $fonts - A list of font names followed by any font weights, such as `Lato 300 400, Raleway 300`
/// @throws 'Mixin `google-font` could not load invalid font weight `#{$w}`.'
@mixin google-font( $fonts... ){
    
  $cdn: 'https://fonts.googleapis.com/css?family=';
    
  // Loop through fonts.
  @each $font in $fonts {

    $name: quote( str-replace( if(is-list($font), first($font), $font), ' ', '+' ) );
    $weights: if( is-list($font), tail($font), () );
    $weight: '';

    @if( length($weights) > 0 ) { $weight: $weight + ':' + glue($weights, ','); }

    @import url( #{$cdn}#{$name}#{$weight} );

  }
    
}

/// Allows font size to be proportionately scaled across breakpoints and/or a given set of elements
///
/// @requires {function} is-number
/// @requires {function} contains
/// @requires {function} numeric-scale
/// @requires {function} map-set
/// @param {list} $elements - A list of elements that should have font sizes assigned according to scale
/// @param {number} $min - The minimum font size allowed when scaling
/// @param {number} $max - The maximum font size allowed when scaling
/// @param {map | null} $save - A variable pointing to a map where scaled font sizes should be saved to at a global level or `null` otherwise
/// @param {boolean} $increasing [false] - Whether to increase or decrease font sizes according to scale
/// @param {boolean} $responsive [true] - Whether to also make font sizes scale responsive across defined breakpoints
/// @param {map} $scale [$brandy-scale-map] - A map containing font scales by breakpoint name
/// @param {map} $breaks [$brandy-screens-map] - A map containing named breakpoints
/// @throws 'Mixin `scale-font` expects a number for argument `$min` but `#{type-of($min)}` was given.'
/// @throws 'Mixin `scale-font` expects a number for argument `$max` but `#{type-of($max)}` was given.'
/// @throws 'Mixin `scale-font` expects `$max` to be greater than or equal to `$min` but the opposite was true. The mixin will continue under the assumption that you meant for these values to be switched.'
/// @throws 'Mixin `scale-font` expects `true` or `false` for argument `$increasing` but `#{$increasing}` was given.'
/// @throws 'Mixin `scale-font` expects `true` or `false` for argument `$responsive` but `#{$responsive}` was given.'
@mixin scale-font( 
  $elements,
  $min: 1em, 
  $max: 1em, 
  $save: null, 
  $increasing: false, 
  $responsive: true, 
  $scale: $brandy-scale-map, 
  $breaks: $brandy-screens-map
){

  @if( not is-number($min) ) {
    
    @error 'Mixin `scale-font` expects a number for argument `$min` but `#{type-of($min)}` was given.';
    
  }
  
  @if( not is-number($max) ) {
    
    @error 'Mixin `scale-font` expects a number for argument `$max` but `#{type-of($max)}` was given.';
    
  }
  
  @if( $min > $max ) { 
    
    @warn 'Mixin `scale-font` expects `$max` to be greater than or equal to `$min` but the opposite was true. ' +
          'The mixin will continue under the assumption that you meant for these values to be switched.';
    
    $temp: $min;
    $max: $min;
    $min: $temp;
    
  }
  
  @if( not contains(true false, $increasing) ) {
    
    @error 'Mixin `scale-font` expects `true` or `false` for argument `$increasing` but `#{$increasing}` was given.';
    
  }
  
  @if( not contains(true false, $responsive) ) {
    
    @error 'Mixin `scale-font` expects `true` or `false` for argument `$responsive` but `#{$responsive}` was given.';
    
  }
  
  $map: ();
  
  $scaled: numeric-scale( $min, $max, length($elements), $increasing );
  
  // Scale elements.
  @for $n from 1 through length($elements) {
    
    $element: nth($elements, $n);
    
    $size: nth($scaled, $n);

    #{$element} { font-size: $size; }

    $map: map-set($map, $element, $size);

    @if( type-of($save) == 'map' ) { $save: map-set($save, $element, $size); }

  } 
  
  // Make responsive.
  @if( $responsive == true ) {
   
    @each $element, $ratio in $map {
      
      @each $screen, $setting in $breaks {
        
        @if( map-has-key($scale, $screen) ) {
          
          $resizer: map-get($scale, $screen);
          
          // Use breakpoint in available.
          @if( mixin-exists(breakpoint) ) {
     
            #{$element} { @include breakpoint($setting){ font-size: $max * $ratio * $resizer; } }
            
          }
          
          // Default to media queries.
          @else {

            // Interpret the screen breakpoint.
            $setting: interpret-screen($setting);

            // Breakout into separate variables.
            $max-width: nth($setting, 1);
            $min-width: nth($setting, 2);
            
            @if( $max-width != false and $min-width != false ) {
              
              @media (max-width: $max-width) and (min-width: $min-width) {
                
                #{$element} { font-size: $max * $ratio * $resizer; }
                
              }
              
            } 
            
            @else if( $max-width != false ) {
              
              @media (max-width: $max-width) {
                
                #{$element} { font-size: $max * $ratio * $resizer; }
                
              }
              
            } 
            
            @else if( $min-width != false ) {
              
              @media (min-width: $min-width) {
                
                #{$element} { font-size: $max * $ratio * $resizer; }
                
              }
            } 

          } 
          
        } 
        
      } 
      
    }
    
  }
  
}

/// Creates a `@font-face` declaration
///
/// @author Thoughbot, Inc.
/// @requires {function} font-source
/// @param {string} $family - Some font family name
/// @param {string} $path - The path to the font file including the filename but excluding the file extension
/// @param {list} $formats ['ttf' 'woff2' 'woff' 'eot' 'svg'] - A list of supported font formats
@mixin font-face($family, $path, $formats: "ttf" "woff2" "woff" "eot" "svg") {
  
  @font-face {
    font-family: $family;
    src: font-source($family, $path, $formats);
  }
  @content;
  
}