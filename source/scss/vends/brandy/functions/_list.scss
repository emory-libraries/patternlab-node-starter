////
/// @group brandy-lists
////

/// Retrieves the first item in a list
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @returns {mixed}
/// @throws 'Cannot get `first` item from non-list `#{$list}`.'
@function first( $list ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot get `first` item from non-list `#{$list}`.';
    
  }
    
  @return nth( $list, 1 );
  
}

/// Retrieves the last item in a list
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @returns {mixed}
/// @throws 'Cannot get `last` item from non-list `#{$list}`.'
@function last( $list ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot get `last` item from non-list `#{$list}`.';
    
  }
    
  @return nth( $list, length( $list ) );
  
}

/// Retrieves the last index of a value in a list
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @param {mixed} $value - Some value to be searched for
/// @returns {number} - Returns the index of the last occurrence of the value or `0` when not found
/// @throws Cannot get `last-index` from non-list `#{$list}`.'
@function last-index( $list, $value ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot get `last-index` from non-list `#{$list}`.';
    
  }
    
  @for $i from length($list) * -1 through -1 {
      
    @if( nth($list, abs($i)) == $value ){
          
      @return abs($i);
          
    }
      
  }
    
  @return 0;
  
}

/// Adds an item to the beginning of a list
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @param {mixed} $value - Some value to add to the beginning of the list
/// @returns {list}
/// @throws 'Cannot execute `prepend` on non-list `#{$list}`.'
@function prepend( $list, $value ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `prepend` on non-list `#{$list}`.';
    
  }
    
  @return join( $value, $list );
  
}

/// Inserts a value at the nth index within a list
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-number
/// @param {list | arglist} $list - Some list
/// @param {number} $index - The index where the value should be inserted
/// @param {mixed} $value - Some value to be inserted into the list
/// @returns {list}
/// @throws 'Cannot execute `insert-nth` on non-list `#{$list}`.'
/// @throws 'Function `insert-nth` expects a number for argument `$index` but `#{type-of($index)}` was given.'
@function insert-nth( $list, $index, $value ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `insert-nth` on non-list `#{$list}`.';
    
  }
  
  @if( not is-number($index) ) {
    
    @error 'Function `insert-nth` expects a number for argument `$index` but `#{type-of($index)}` was given.';
    
  }
    
  $result: ();
  
  @if( $index <= length($list) ) {
    
    @for $i from 1 through length($list) {

      @if( $i == $index ){ $result: append( $result, $value ); }

      $result: append( $result, nth( $list, $i ) );

    }
    
  }
  
  @else {
    
    $result: append($list, $value);
    
  }
    
  @return $result;
    
}

/// Replaces one or more occurrences of a value within a list with a new value
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} contains
/// @param {list | arglist} $list - Some list
/// @param {mixed} $old - The old value to be replaced
/// @param {mixed} $new - The new value to be inserted in place of the old value
/// @param {boolean} $recursive [false] - Determines whether only the first occurrence or all occurrences should be replaced
/// @returns {list}
/// @throws 'Cannot execute `replace` on non-list `#{$list}`.'
/// @throws 'Function `replace` expects `true` or `false` for argument `$recursive` but `#{$recursive}` was given.'
@function replace( $list, $old, $new, $recursive: false ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `replace` on non-list `#{$list}`.';
    
  }
  
  @if( not contains(true false, $recursive) ) {
    
    @error 'Function `replace` expects `true` or `false` for argument `$recursive` but `#{$recursive}` was given.';
    
  }
    
  $result: ();
    
  @for $i from 1 through length($list){
        
    @if( is-list(nth($list,$i)) and $recursive ){
      
      $result: append($result, replace(nth($list, $i), $old, $new, $recursive));
    
    }
    
    @else {
           
      @if( nth($list, $i) == $old ){ $result: append($result, $new); }
            
      @else { $result: append($result, nth($list, $i)); }
        
    }
    
  }
    
  @return $result;
    
}

/// Replaces a value at the nth index within a list
/// 
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-number
/// @param {list | arglist} $list - Some list
/// @param {number} $index - The index where the value should be replaced
/// @param {mixed} $value - The value to be inserted in place of the old value
/// @returns {list}
/// @throws 'Cannot execute `replace-nth` on non-list `#{$list}`.'
/// @throws 'Function `replace-nth` expects a number for argument `$index` but `#{type-of($index)}` was given.'
@function replace-nth( $list, $index, $value ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `replace-nth` on non-list `#{$list}`.';
    
  }
  
  @if( not is-number($index) ) {
    
    @error 'Function `replace-nth` expects a number for argument `$index` but `#{type-of($index)}` was given.';
    
  }
    
  $result: ();
  $index: if( $index < 0, length($list) + $index + 1, $index );
    
  @for $i from 1 through length($list){
    
    @if( $i == $index ){ $result: append( $result, $value ); }
    @else { $result: append( $result, nth($list, $i) ); }
    
  }
    
  @return $result;
    
}

/// Removes one or more occurrences of a value from a list
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} contains
/// @param {list | arglist} $list - Some list
/// @param {mixed} $value - Some value to be removed from the list
/// @param {boolean} $recurive [false] - Determines whether only the first occurrence or all occurrences should be removed
/// @returns {list}
/// @throws 'Cannot execute `remove` on non-list `#{$list}`.'
/// @throws 'Function `remove` expects `true` or `false` for argument `$recursive` but `#{$recursive}` was given.'
@function remove( $list, $value, $recursive: false ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `remove` on non-list `#{$list}`.';
    
  }
  
  @if( not contains(true false, $recursive) ) {
    
    @error 'Function `remove` expects `true` or `false` for argument `$recursive` but `#{$recursive}` was given.';
    
  }
    
  $result: ();
    
  @for $i from 1 through length($list){
        
    @if( is-list(nth($list,$i)) and $recursive ){
      
      $result: append( $result, remove( nth($list, $i), $value, $recursive ) );
    
    }
    
    @else if( nth($list, $i) != $value ){
      
      $result: append( $result, nth($list, $i) );
        
    }
    
  }
    
  @return $result;
    
}

/// Rremoves a value at the nth index within a list
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-number
/// @param {list | arglist} $list - Some list
/// @param {number} $index - The index where the value should be removed
/// @returns {list}
/// @throws 'Cannot execute `remove-nth` on non-list `#{$list}`.'
/// @throws 'Function `remove-nth` expects a number for argument `$index` but `#{type-of($index)}` was given.'
@function remove-nth( $list, $index ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `remove-nth` on non-list `#{$list}`.';
    
  }
  
  @if( not is-number($index) ) {
    
    @error 'Function `remove-nth` expects a number for argument `$index` but `#{type-of($index)}` was given.';
    
  }
    
  $result: ();
  $index: if( $index < 0, length( $list ) + $index + 1, $index );
    
  @for $i from 1 through length($list){
        
    @if( $i != $index ){ $result: append( $result, nth($list, $i) ); }
    
  }
    
  @return $result;
    
}

/// Extracts a subset of a list between a starting and ending point
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-number
/// @requires {function} is-negative
/// @param {list | arglist} $list - Some list
/// @param {number} $start [1] - The starting index where the slice should begin
/// @param {number} $end [length($list)] - The ending index where the slice should stop
/// @returns {list}
/// @throws 'Cannot execute `slice` on non-list `#{$list}`.'
/// @throws 'Function `slice` expects a number for argument `$start` but `#{type-of($start)}` was given.'
/// @throws 'Function `slice` expects a number for argument `$end` but `#{type-of($end)}` was given.'
/// @throws 'Cannot execute `slice` when start `#{$start}` exceeds end `#{$end}`.'
@function slice( $list, $start: 1, $end: length($list) ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `slice` on non-list `#{$list}`.';
    
  }
  
  @if( not is-number($start) ) {
    
    @error 'Function `slice` expects a number for argument `$start` but `#{type-of($start)}` was given.';
    
  }
  
  @if( not is-number($end) ) {
    
    @error 'Function `slice` expects a number for argument `$end` but `#{type-of($end)}` was given.';
    
  }
    
  $result: ();
  
  $s: $start;
  $e: $end;
  
  @if( is-negative($s) ) { $s: length($list) + $s; }
  @if( is-negative($e) ) { $e: length($list) + $e; }
  
  @if( $s > $e ) { 
    
    @error 'Cannot execute `slice` when start `#{$start}` exceeds end `#{$end}`.';
      
  }
    
  @for $i from $s through $e { $result: append( $result, nth($list, $i) ); }
    
  @return $result;
    
}

/// Reverses the order of items within a list
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} contains
/// @param {list | arglist} $list - Some list
/// @param {boolean} $recursive [false] - Determines whether nested lists should also be reversed
/// @returns {list}
/// @throws 'Cannot execute `reverse` on non-list `#{$list}`.'
/// @throws 'Function `reverse` expects `true` or `false` for argument `$recursive` but `#{$recursive}` was given.'
@function reverse( $list, $recursive: false ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `reverse` on non-list `#{$list}`.';
    
  }
  
  @if( not contains(true false, $recursive) ) {
    
    @error 'Function `reverse` expects `true` or `false` for argument `$recursive` but `#{$recursive}` was given.';
    
  }
    
  $result: ();
    
  @for $i from length($list) * -1 through -1 {
        
    @if( is-list(nth($list, abs($i))) and $recursive ){
            
      $result: append( $result, reverse(nth($list,abs($i)), $recursive) );
        
    }
        
    @else {
            
      $result: append( $result, nth($list, abs($i)) );
        
    }
    
  }
    
  @return $result;
    
}

/// Shuffles the order of items within a list
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} contains
/// @param {list | arglist} $list - Some list
/// @param {boolean} $recursive [false] - Determines whether nested lists should also be shuffled
/// @returns {list}
/// @throws 'Cannot execute `reverse` on non-list `#{$list}`.'
/// @throws 'Function `reverse` expects `true` or `false` for argument `$recursive` but `#{$recursive}` was given.'
@function shuffle( $list, $recursive: false ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `shuffle` on non-list `#{$list}`.';
    
  }
  
  @if( not contains(true false, $recursive) ) {
    
    @error 'Function `shuffle` expects `true` or `false` for argument `$recursive` but `#{$recursive}` was given.';
    
  }
  
  $result: $list;
  
  @for $i from (length($list) * -1) through -1 {
    
    $n: floor(random(length($list)));
    
    $x: nth($result, abs($i));
    
    $result: set-nth($result, abs($i), nth($result, $n));
    
    $result: set-nth($result, $n, $x);
    
  }
  
  @return $result;
  
}

/// Glues a list together with a string to form a string
///
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-string
/// @requires {function} contains
/// @param {list | arglist} $list - Some list
/// @param {string} $glue [''] - Acts as the glue between list items
/// @param {boolean} $nested [false] - Determines whether the list is part of a nested list, used for recursion
/// @returns {string | null}
/// @throws 'Cannot execute `glue` on non-list `#{$list}`.'
/// @throws 'Function `glue` expects a string for argument `$glue` but `#{type-of($glue)}` was given.'
/// @throws 'Function `glue` expects `true` or `false` for argument `$nested` but `#{$nested}` was given.'
@function glue( $list, $glue: '', $nested: false ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `glue` on non-list `#{$list}`.';
    
  }
  
  @if( not is-string($glue) ) {
    
    @error 'Function `glue` expects a string for argument `$glue` but `#{type-of($glue)}` was given.';
    
  }
  
  @if( not contains(true false, $nested) ) {
    
    @error 'Function `glue` expects `true` or `false` for argument `$nested` but `#{$nested}` was given.';
    
  }
    
  $result: '';
    
  @for $i from 1 through length($list) {
        
    $e: nth($list, $i);
        
    @if( is-list($e) ){ $result: $result + glue($e, $glue, true); }
    
    @else { $result: if( $i != length($list) or $nested, $result + $e + $glue, $result + $e ); }
        
  }
    
  @return if($result == '', null, $result);
    
}

/// Reindexes a list by the given value
///
/// @author Ana Tudor
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-number
/// @param {list | arglist} $list - Some list
/// @param {number} $shift [1] - The number of places by which to shift the list indices
/// @returns {list}
/// @throws 'Cannot execute `shift-index` on non-list `#{$list}`.'
/// @throws 'Function `shift-index` expects a number for argument `$shift` but `#{type-of($shift)}` was given.'
@function shift-index( $list, $shift: 1 ){
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `shift-index` on non-list `#{$list}`.';
    
  }
  
  @if( not is-number($shift) ) {
    
    @error 'Function `shift-index` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
    
  $result: ();
    
  @for $i from 0 to length($list) { $result: append( $result, nth($list, ($i - $shift) % length($list) + 1) ); }
    
  @return $result;
    
}

/// Determines whether or not the list contains the given value
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @param {mixed} $search - The value to be searched for
/// @returns {boolean}
/// @throws 'Cannot execute `contains` on non-list `#{$list}`.'
@function contains( $list, $search ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `contains` on non-list `#{$list}`.';
    
  }
  
  $result: false;
  
  @each $item in $list {
    
    @if( $item == $search ) { $result: true; }
    
  }
  
  @return $result;
  
}

/// Determines whether or not the list starts with the given value
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} first
/// @param {list | arglist} $list - Some list
/// @param {mixed} $search - The value to be searched for
/// @returns {boolean}
/// @throws 'Cannot execute `starts-with` on non-list `#{$list}`.'
@function starts-with( $list, $search ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `starts-with` on non-list `#{$list}`.';
    
  }
  
  @return first($list) == $search;
  
}

/// Determines whether or not the list ends with the given value
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} last
/// @param {list | arglist} $list - Some list
/// @param {mixed} $search - The value to be searched for
/// @returns {boolean}
/// @throws 'Cannot execute `ends-with` on non-list `#{$list}`.'
@function ends-with( $list, $search ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `ends-with` on non-list `#{$list}`.';
    
  }
  
  @return last($list) == $search;
  
}

/// Chunks a list into subsets of the given size
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-number
/// @param {list | arglist} $list - Some list
/// @param {number} $length - The maximum length of chunked lists
/// @returns {list}
/// @throws 'Cannot execute `chunk` on non-list `#{$list}`.'
/// @throws 'Function `chunk` expects a number for argument `$length` but `#{type-of($length)}` was given.'
@function chunk( $list, $length ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `chunk` on non-list `#{$list}`.';
    
  }
  
  @if( not is-number($length) ) {
    
    @error 'Function `chunk` expects a number for argument `$length` but `#{type-of($length)}` was given.';
    
  }
  
  $result: ();
  $subset: ();
  
  @if( $length >= length($list) ) { @return $list; }
  
  $i: 1;
  $n: 1;
  
  @while( $i <= length($list) ) {
    
    @if( nth($list, $i) ) { $subset: append($subset, nth($list, $i), list-separator($list)); }
    
    @if( $n == $length or $i == length($list) ) { 
  
      $result: append($result, $subset, comma); 
      
      $subset: ();
      
      $n: 0;
      
    }
    
    $n: $n + 1;
    $i: $i + 1;
    
  }
  
  @return $result;
  
}

/// Counts the number of times a value occurs within a list
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-arglist
/// @requires {function} cast-list
/// @param {list | arglist} $list - Some list
/// @param {arglist} $items - Filters the items to be counted
/// @returns {map | number}
/// @throws 'Cannot execute `count` on non-list `#{$list}`.'
/// @throws 'Function `count` expects an arglist for argument `$items` but #{type-of($items)}` was given.'
@function count( $list, $items... ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `count` on non-list `#{$list}`.';
    
  }
  
  @if( not is-arglist($items) ) {
    
    @error 'Function `count` expects an arglist for argument `$items` but #{type-of($items)}` was given.';
    
  }
  
  $result: ();
  
  @if( length($items) > 0 ) {
    
    @each $item in $items {
      
      $result: map-merge($result, ($item: 0));
      
    }
    
    @each $item in $list {
      
      @if( index($items, $item) != null ) {
        
        $result: map-merge($result, ($item: map-get($result, $item) + 1));
        
      }
      
    }
    
  }
  
  @else {
  
    @each $item in $list {

      $count: map-get($result, $item);

      $value: if($count, $count + 1, 1);

      $result: map-merge($result, ($item: $value));
        
    }
    
  }
  
  @return if(length(map-keys($result)) == 1, map-get($result, first(map-keys($result))), $result);
  
}

/// Tests if every item in the list meets some criteria presented by the `$test` function
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-string
/// @param {list | arglist} $list - Some list
/// @param {string} $test - The name of the function to be used as a test
/// @param {arglist} $input - Any arguments to pass into the function
/// @returns {boolean}
/// @throws 'Cannot execute `every` on non-list `#{$list}`.'
/// @throws 'Function `every` expects a string for argument `$test` but `#{type-of($test)}` was given.'
/// @throws 'Cannot execute `every` due to invalid function `#{$test}`.'
@function every( $list, $test, $input... ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `every` on non-list `#{$list}`.';
    
  }
  
  @if( not is-string($test) ) {
    
    @error 'Function `every` expects a string for argument `$test` but `#{type-of($test)}` was given.';
    
  }
  
  @if( not function-exists($test) ) {
    
    @error 'Cannot execute `every` due to invalid function `#{$test}`.';
    
  }
  
  @each $item in $list {
    
    @if ( not call(get-function($test), $item, $input...) ) {
      
      @return false;
      
    }
    
  }
  
  @return true;
  
}

/// Tests if some items in the list meet some criteria presented by the `$test` function
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-string
/// @param {list | arglist} $list - Some list
/// @param {string} $test - The name of the function to be used as a test
/// @param {arglist} $input - Any arguments to pass into the function
/// @returns {boolean}
/// @throws 'Cannot execute `some` on non-list `#{$list}`.'
/// @throws 'Function `some` expects a string for argument `$test` but `#{type-of($test)}` was given.'
/// @throws 'Cannot execute `some` due to invalid function `#{$test}`.'
@function some( $list, $test, $input... ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `some` on non-list `#{$list}`.';
    
  }
  
  @if( not is-string($test) ) {
    
    @error 'Function `some` expects a string for argument `$test` but `#{type-of($test)}` was given.';
    
  }
  
  @if( not function-exists($test) ) {
    
    @error 'Cannot execute `some` due to invalid function `#{$test}`.';
    
  }
  
  @each $item in $list {
    
    @if ( call(get-function($test), $item, $input...) ) {
      
      @return true;
      
    }
    
  }
  
  @return false;
  
}

/// Determines if a list is empty
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @returns {boolean}
/// @throws 'Cannot execute `is-empty` on non-list `#{$list}`.'
@function is-empty( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `is-empty` on non-list `#{$list}`.';
    
  }
  
  @return length($list) == 0;
  
}

/// Determines if a list contains more than one item
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @returns {boolean}
/// @throws 'Cannot execute `is-multiple` on non-list `#{$list}`.'
@function is-multiple( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `is-multiple` on non-list `#{$list}`.';
    
  }
  
  @return length($list) > 1;
  
}

/// Determines if a list contains only one item
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @returns {boolean}
/// @throws 'Cannot execute `is-single` on non-list `#{$list}`.'
@function is-single( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `is-single` on non-list `#{$list}`.';
    
  }
  
  @return length($list) == 1;
  
}

/// Removes duplicate values from a list
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} contains
/// @param {list | arglist} $list - Some list
/// @returns {list}
/// @throws 'Cannot execute `unique` on non-list `#{$list}`.'
@function unique( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `unique` on non-list `#{$list}`.';
    
  }
  
  $result: ();
  
  @each $item in $list {
    
    @if( not contains($result, $item) ) {
      
      $result: append($result, $item);
      
    }
    
  }
  
  @return $result;
  
}

/// Determines if every value in a list is equal to `true`
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @returns {boolean}
/// @throws 'Cannot execute `is-truthy` on non-list `#{$list}`.'
@function is-truthy( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `is-truthy` on non-list `#{$list}`.';
    
  }
  
  @each $item in $list {
    
    @if( $item != true ) { @return false }
    
  }
  
  @return true;
  
}

/// Determines if every value in a list is equal to `false`
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @returns {boolean}
/// @throws 'Cannot execute `is-falsy` on non-list `#{$list}`.'
@function is-falsy( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `is-falsy` on non-list `#{$list}`.';
    
  }
  
  @each $item in $list {
    
    @if( $item != false ) { @return false }
    
  }
  
  @return true;
  
}

/// Pinpoints the intersection between two or more lists
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} unique
/// @requires {function} contains
/// @param {list | arglist} $list - Some list to be used as a reference
/// @param {arglist} $lists - Additional lists to be used for comparison
/// @returns {list}
/// @throws 'Cannot execute `intersection` on non-list `#{$list}`.'
@function intersection( $list, $lists... ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `intersection` on non-list `#{$list}`.';
    
  }
  
  $result: $list;
  
  @each $comp in $lists {
    
    $intersection: ();
    
    @each $item in $result {
      
      @if( contains($comp, $item) ) {
        
        $intersection: append($intersection, $item, list-separator($list));
        
      }
      
    }
    
    $result: $intersection;
    
  }
  
  @return unique($result);
  
}

/// Determines whether a list is symmetrical
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} reverse
/// @param {list | arglist} $list - Some list
/// @returns {boolean}
/// @throws 'Cannot execute `is-symmetrical` on non-list `#{$list}`.'
@function is-symmetrical( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `is-symmetrical` on non-list `#{$list}`.';
    
  }
  
  @return $list == reverse($list);
  
}

/// Removes empty values, such as `null`, `false`, `''`, and `()`, from a list
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @param {list | arglist} $list - Some list
/// @returns {list}
/// @throws 'Cannot execute `scrub` on non-list `#{$list}`.'
@function scrub( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `scrub` on non-list `#{$list}`.';
    
  }
  
  $result: ();
  
  @each $item in $list {
    
    @if( $item != false and $item != () and $item != null and $item != '' ) {
      
      $result: append($result, $item);
      
    }
    
  }
  
  @return $result;
  
}

/// Retrieves a random item from a list
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-empty
/// @param {list | arglist} $list - Some list
/// @returns {mixed}
/// @throws 'Cannot execute `chance` on non-list `#{$list}`.'
/// @throws 'Cannot return a random value from an empty list.'. 
@function chance( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `chance` on non-list `#{$list}`.';
    
  }
  
  @if( is-empty($list) ) { 
  
    @error 'Cannot return a random value from an empty list.';
  
  }
  
  @return nth($list, random(length($list) - 1) + 1);
  
}

/// Builds a list with values ranging from 1 through `$n`
///
/// @requires {function} is-number
/// @requires {function} str-is-number
/// @requires {function} strip-unit
/// @param {number} $n - Maximum index
/// @returns {list}
/// @throws 'Function `range` expects a number for argument `$n` but `#{type-of($n)}` was given.'
/// @throws 'Cannot create range from invalid number `#{$n}`.'
/// @throws 'Cannot create range from negative number `#{$n}`.'
@function range( $n ) {
  
  @if( not is-number($n) ) {
    
    @error 'Function `range` expects a number for argument `$n` but `#{type-of($n)}` was given.';
    
  }
  
  $result: ();
  
  @if( not str-is-numeric('#{$n}') ) {
    
    @error 'Cannot create range from invalid number `#{$n}`.';
    
  }
  
  @else if( $n < 1 ) {
    
    @error 'Cannot create range from negative number `#{$n}`.';
    
  }
  
  @else {
  
    @for $i from 1 through strip-unit($n) {
      
      $result: append($result, $i);
      
    }
    
  }
  
  @return $result;
  
}

/// Builds a list with values ranging from `$min` through `$max`
///
/// @requires {function} is-string
/// @requires {function} is-number
/// @requires {function} str-is-number
/// @requires {function} extract-unit
/// @requires {function} strip-unit
/// @requires {function} unit-to-digit
/// @param {number} $min - Minimum value
/// @param {number} $max - Maximum value
/// @returns {list}
/// @throws 'Cannot create range from invalid minimum `#{$min}`.'
/// @throws 'Cannot create range from invalid maximum `#{$max}`.'
/// @throws 'Function `range-min-max` expects a numnber for argument `$min` but `#{type-of($min)}` was given.'
/// @throws 'Function `range-min-max` expects a numnber for argument `$max` but `#{type-of($max)}` was given.'
@function range-min-max( $min, $max ) {
  
  @if( is-string($min) ) {
    
    @if( not str-is-numeric('#{$min}') ) {

      @error 'Cannot create range from invalid minimum `#{$min}`.';

    }
    
    @else {
      
      $min: cast-number($min);
      
    }
    
  }
  @else if( not is-number($min) ) {
    
    @error 'Function `range-min-max` expects a numnber for argument `$min` but `#{type-of($min)}` was given.';
    
  }
  
  @if( is-string($max) ) {
    
    @if( not str-is-numeric('#{$max}') ) {
    
      @error 'Cannot create range from invalid maximum `#{$max}`.';

    }
    
    @else {
      
      $max: cast-number($max);
      
    }
    
  }
  @else if( not is-number($max) ) {
    
    @error 'Function `range-min-max` expects a numnber for argument `$max` but `#{type-of($max)}` was given.';
    
  }

  $result: ();
    
  $inverted: if( strip-unit($max) >= strip-unit($min), false, true );
    
  $unit: unit-to-digit(extract-unit($min));
    
  @if( not $inverted ) {
  
    @for $i from strip-unit($min) through strip-unit($max) {

      $result: append($result, $i + $unit);

    }
      
  }
    
  @else {
      
    @for $i from (strip-unit($min) * -1) through (strip-unit($max) * -1) {
        
      $result: append($result, abs($i) + $unit);
        
    }
      
  }
  
  @return $result;
  
}

/// Builds a list with values ranging from a through `$x`
///
/// @requires {function} is-string
/// @requires {function} contains
/// @requires {function} str-is-letter
/// @requires {function} cast-string
/// @requires {variable} $brandy-letters
/// @param {string} $x - Maximum index
/// @param {boolean} $lowercase [true] - Whether the result should be lowercase or uppercase
/// @returns {list}
/// @throws 'Function `range-alpha` expects a string for argument `$x` but `#{type-of($x)}` was given.'
/// @throws 'Function `range-alpha` expects `true` or `false` for argument `$lowercase` but `#{$lowercase}` was given.'
/// @throws 'Cannot create range from invalid letter `#{$x}`.'
@function range-alpha( $x, $lowercase: true ) {
  
  @if( not is-string($x) ) {
    
    @error 'Function `range-alpha` expects a string for argument `$x` but `#{type-of($x)}` was given.';
    
  }
  
  @if( not contains(true false, $lowercase) ) {
    
    @error 'Function `range-alpha` expects `true` or `false` for argument `$lowercase` but `#{$lowercase}` was given.';
    
  }
  
  $result: ();
  
  $insensitive-x: to-lower-case($x);
  
  @if( not str-is-letter($insensitive-x) ) {
    
    @error 'Cannot create range from invalid letter `#{$x}`.';
    
  }
    
  $index: index(map-keys($brandy-letters), $insensitive-x);
  
  @for $n from 1 through $index {
      
      $letter: nth(map-keys($brandy-letters), $n);
      
      $result: append($result, if($lowercase, $letter, to-upper-case($letter)));
      
    }
  
  @return $result;
  
}

/// Builds a list with letters ranging from `$min` through `$max`
///
/// @requires {function} is-string
/// @requires {function} contains
/// @requires {function} str-is-letter
/// @requires {function} cast-string
/// @requires {variable} $brandy-letters
/// @param {string} $min - Minimum value
/// @param {string} $max - Maximum value
/// @param {boolean} $lowercase [true] - Whether the result should be lowercase or uppercase
/// @returns {list}
/// @throws 'Function `range-alpha-min-max` expects a string for argument `$min` but `#{type-of($min)}` was given.'
/// @throws 'Function `range-alpha-min-max` expects a string for argument `$max` but `#{type-of($max)}` was given.'
/// @throws 'Function `range-alpha-min-max` expects `true` or `false` for argument `$lowercase` but `#{$lowercase}` was given.'
/// @throws 'Cannot create range from invalid minimum `#{$min}`.'
/// @throws 'Cannot create range from invalid maximum `#{$max}`.'
@function range-alpha-min-max( $min, $max, $lowercase: true ) {
  
  @if( not is-string($min) ) {
    
    @error 'Function `range-alpha-min-max` expects a string for argument `$min` but `#{type-of($min)}` was given.';
    
  }
  
  @if( not is-string($max) ) {
    
    @error 'Function `range-alpha-min-max` expects a string for argument `$max` but `#{type-of($max)}` was given.';
    
  }
  
  @if( not contains(true false, $lowercase) ) {
    
    @error 'Function `range-alpha-min-max` expects `true` or `false` for argument `$lowercase` but `#{$lowercase}` was given.';
    
  }
  
  $result: ();
  
  $insensitive-min: to-lower-case($min);
  $insensitive-max: to-lower-case($max);
  
  @if( not str-is-letter($insensitive-min) ) {
    
    @error 'Cannot create range from invalid minimum `#{$min}`.';
    
  }
  
  @if( not str-is-letter($insensitive-max) ) {
    
    @error 'Cannot create range from invalid maximum `#{$max}`.';
    
  }
    
  $mindex: index(map-keys($brandy-letters), $insensitive-min); 
  $maxdex: index(map-keys($brandy-letters), $insensitive-max);

  $inverted: if( $maxdex >= $mindex, false, true );

  @if( not $inverted ) {

    @for $n from $mindex through $maxdex {

      $letter: nth(map-keys($brandy-letters), $n); 

      $result: append($result, if($lowercase, $letter, to-upper-case($letter)));

    }

  }

  @else {

    @for $n from ($mindex * -1) through ($maxdex * -1) {

      $letter: nth(map-keys($brandy-letters), abs($n));

      $result: append($result, if($lowercase, $letter, to-upper-case($letter)));

    }

  }
  
  @return $result;
  
}

/// Converts every item in a list to a string
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} cast-string
/// @requires {function} first
/// @param {list | arglist} $list
/// @returns {list}
/// @throws 'Cannot execute `stringify` on non-list `#{$list}`.'
@function stringify( $list... ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `stringify` on non-list `#{$list}`.';
    
  }
  
  @if( length($list) == 1 and is-list(first($list)) ) { $list: first($list); }
  
  $result: ();
  
  @each $item in $list {
    
    $result: append($result, cast-string($item), list-separator($list));
    
  }
  
  @return $result;
  
}

/// Converts unquotes every string in a list
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-string
/// @requires {function} cast-string
/// @requires {function} first
/// @param {list | arglist} $list
/// @returns {list}
/// @throws 'Cannot execute `stringify` on non-list `#{$list}`.'
@function unstringify( $list... ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `unstringify` on non-list `#{$list}`.';
    
  }
  
  @if( length($list) == 1 and is-list(first($list)) ) { $list: first($list); }
  
  $result: ();
  
  @each $item in $list {
    
    $item: if( is-string($item), unquote($item), $item);
    
    $result: append($result, $item, list-separator($list));
    
  }
  
  @return $result;
  
}

/// Joins multile lists together into one list
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} first
/// @param {arglist} $lists - Multiple lists
/// @returns {list}
/// @throws 'Cannot execute `joins` with non-list `#{first($lists)}`.'
/// @throws 'Cannot execute `joins` with non-list `#{$list}`.'
@function joins( $lists... ) { 
  
  @if( length($lists) == 1 ) { 
    
    @if( not is-list(first($lists)) and not is-arglist(first($lists)) ) {
      
      @error 'Cannot execute `joins` with non-list `#{first($lists)}`.';
      
    }
    
    @return first($lists); 
  
  }
  
  $result: ();
  
  $separator: null;
  
  @each $list in $lists {
    
    @if( not is-list($list) and not is-arglist($list) ) {
      
      @error 'Cannot execute `joins` with non-list `#{$list}`.';
      
    }
    
    @if( is-null($separator) ) { $separator: list-separator($list); }
    
    $result: join($result, $list, $separator);
    
  }
  
  @return $result;
  
}

/// Sums all numeric values in a list, ignoring non-numeric values
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-string
/// @requires {function} is-null
/// @requires {function} str-is-number
/// @requires {function} stringify
/// @requires {function} cast-number
/// @requires {function} strip-unit
/// @requires {function} extract-unit
/// @param {list | arglist} $list - Some list containing numeric values
/// @param {boolean} $ignorant [false] - Whether units should be ignored and subsequently stripped
/// @returns {number} - Returns sum of all numeric values or `0` otherwise
/// @throws 'Cannot execute `sum` on non-list `#{$list}`.'
/// @throws 'Function `sum` expects `true` or `false` for argument `$ignorant` but `#{$ignorant}` was given.'
/// @throws 'Some list items are non-numeric for `sum`.'
/// @throws 'Some list items in `sum` were ignored due to units. Set `$ignorant` to `true` to ignore units.'
@function sum( $list, $ignorant: false ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `sum` on non-list `#{$list}`.';
    
  }
  
  @if( not contains(true false, $ignorant) ) {
    
    @error 'Function `range-alpha` expects `true` or `false` for argument `$ignorant` but `#{$ignorant}` was given.';
    
  }
  
  $add: ();
  
  $warn: false;
  
  $result: 0;
  
  @each $item in $list {
    
    @if( is-string($item) and str-is-number($item) ) { $add: append($add, cast-number($item)); }
    
    @else if( is-number($item) ) { $add: append($add, $item); }
    
    @else { $warn: true; }
    
  }
  
  @if( $warn ) { @warn 'Some list items are non-numeric for `sum`.'; }
  
  $units: null;
  
  $warn: false;
  
  @each $item in $add {
      
    @if( $ignorant ) {
        
      $result: $result + strip-unit($item);
        
    }
      
    @else {
        
      $unit: extract-unit( $item );
        
      @if( is-null($units) ) { $units: $unit; }
        
      @if( $unit == $units ) { $result: $result + $item; }
      
      @else { $warn: true; }
        
    }
    
  }
  
  @if( $warn ) { @warn 'Some list items in `sum` were ignored due to units. Set `$ignorant` to `true` to ignore units.'; }
  
  @return $result;
  
}

/// Averages all numeric values in a list, ignoring non-numeric values
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-number
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {function} strip-unit
/// @requires {function} extract-unit
/// @requires {function} is-null
/// @param {list | arglist} $list - Some list containing numeric values
/// @param {boolean} $ignorant [false] - Whether units should be ignored and subsequently stripped
/// @returns {number | null} - Returns average of all numeric values or `null` otherwise
/// @throws 'Cannot execute `avg` on non-list `#{$list}`.'
/// @throws 'Function `range-alpha` expects `true` or `false` for argument `$ignorant` but `#{$ignorant}` was given.'
/// @throws 'Some list items are non-numeric for `avg`.'
/// @throws 'Some list items in `avg` were ignored due to units. Set `$ignorant` to `true` to ignore units.'
@function avg( $list, $ignorant: false ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `avg` on non-list `#{$list}`.';
    
  }
  
   @if( not contains(true false, $ignorant) ) {
    
    @error 'Function `range-alpha` expects `true` or `false` for argument `$ignorant` but `#{$ignorant}` was given.';
    
  }
  
  $add: ();
  
  $warn: false;
  
  $sum: 0;
  
  $count: 0;
  
  @each $item in $list {
    
    @if( is-string($item) and str-is-number($item) ) { $add: append($add, cast-number($item)); }
    
    @else if( is-number($item) ) { $add: append($add, $item); }
    
    @else { $warn: true; }
    
  }
  
  @if( $warn ) { @warn 'Some list items are non-numeric for `avg`.'; }
  
  $units: null;
  
  $warn: false;
  
  @each $item in $add {
      
    @if( $ignorant ) {

      $sum: $sum + strip-unit($item);
      
      $count: $count + 1;

    }

    @else {

      $unit: extract-unit( $item );

      @if( $units == null ) { $units: $unit; }

      @if( $unit == $units ) {

        $sum: $sum + $item;

        $count: $count + 1;

      }
      
      @else { $warn: true; }

    }
    
  }
  
  @if( $warn ) { @warn 'Some list items in `avg` were ignored due to units. Set `$ignorant` to `true` to ignore units.'; }

  $average: $sum / $count;
  
  @return if(is-NaN($average), null, $average);
  
}

/// Sorts a list
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} insert-nth
/// @requires {function} is-number
/// @requires {function} cast-string
/// @requires {variable} $brandy-sort-order
/// @param {list | arglist} $list - Some list to be sorted
/// @returns {list}
/// @throws 'Cannot execute `sort` on non-list `#{$list}`.'
@function sort( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `sort` on non-list `#{$list}`.';
    
  }
  
  $result: ();
  
  @for $x from 1 through length($list) {
    
    $a: nth($list, $x);
    
    $n: 1;
    
    @if( length($result) > 0 ) {
    
      @for $i from 1 through length($result) {

        $b: nth($result, $i);
        
        @if( is-number($a) and is-number($b) and $b < $a ) { $n: $n + 1; }
        
        @else {
          
          $a-str: to-lower-case(cast-string($a));
          $b-str: to-lower-case(cast-string($b));
          
          @for $i from 1 through min(str-length($a-str), str-length($b-str)) {
            
            $a-char: char-at($a-str, $i);
            $b-char: char-at($b-str, $i);
           
            $a-index: index($brandy-sort-order, $a-char);
            $b-index: index($brandy-sort-order, $b-char); 
            
            @if( $b-index < $a-index ) { $n: $n + 1; }
            
          }
          
        }

      }
      
    }
    
    $result: insert-nth($result, $n, $a);
    
  }
  
  @return $result;
  
}

/// Applies a function to every item within the list
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-string
/// @param {list | arglist} $list - Some list
/// @returns {list}
/// @throws 'Cannot execute `walk` on non-list `#{$list}`.'
/// @throws 'Function `walk` expects a string for argument `$function` but `#{type-of($function)}` was given.'
/// @throws 'Cannot execute `walk` due to invalid function `#{$function}`.'
@function walk( $list, $function, $inputs... ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `walk` on non-list `#{$list}`.';
    
  }
  
  @if( not is-string($function) ) {
    
    @error 'Function `walk` expects a string for argument `$function` but `#{type-of($function)}` was given.';
    
  }
  
  @if( not function-exists($function) ) {
    
    @error 'Cannot execute `walk` due to invalid function `#{$function}`.';
    @return $list;
    
  }
  
  $result: ();
  
  $separator: list-separator( $list );
  
  @each $item in $list {
    
    @if( length($inputs) > 0 ) {
      
      $result: append($result, call(get-function($function), ($item, $inputs)...), $separator);
      
    }
    
    @else {
    
      $result: append($result, call(get-function($function), $item), $separator);
      
    }
    
  }
  
  @return $result;
  
}

/// Retrieves all items from a list except for the last
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} slice
/// @param {list | arglist} $list - Some list
/// @returns {list}
/// @throws 'Cannot execute `head` on non-list `#{$list}`.'
@function head( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `head` on non-list `#{$list}`.';
    
  }
  
  @return slice($list, 1, -1);
  
}

/// Retrieves all items from a list except for the first
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} slice
/// @param {list | arglist} $list - Some list
/// @returns {list}
/// @throws 'Cannot execute `tail` on non-list `#{$list}`.'
@function tail( $list ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `tail` on non-list `#{$list}`.';
    
  }
  
  @return slice($list, 2);
  
}

/// Flattens a list with any nested lists to a single level
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-number
/// @param {list} | arglist $list - Some list to be flattened
/// @param {number} $limit - Limits the number of list levels that should be flattened or `0` when no limit is imposed
/// @param {number} $level - The nesting level of the current list, used for recursion
/// @returns {list}
/// @throws 'Cannot execute `flatten` on non-list `#{$list}`.'
/// @throws 'Function `flatten` expects a number for argument `$limit` but `#{type-of($limit)}` was given.'
/// @throws 'Function `flatten` expects a number for argument `$level` but `#{type-of($level)}` was given.'
@function flatten( $list, $limit: 0, $level: 1 ) {
  
  @if( not is-list($list) and not is-arglist($list) ) {
    
    @error 'Cannot execute `flatten` on non-list `#{$list}`.';
    
  }
  
  @if( not is-number($limit) ) {
    
    @error 'Function `flatten` expects a number for argument `$limit` but `#{type-of($limit)}` was given.';
    
  }
  
  @if( not is-number($level) ) {
    
    @error 'Function `flatten` expects a number for argument `$level` but `#{type-of($level)}` was given.';
    
  }
  
  $result: ();
  
  $level: 1;
  
  @each $item in $list {
    
    // Handle limits.
    @if ( $limit > 0 ) {
      
      @if( is-list( $item ) ) {
      
        // Continue to flatten up to the allotted limit.
        @if( $level <= $limit ) { $result: join($result, flatten($item, $limit, $level + 1)); }
        
        // Otherwise, keep lists intact.
        @else { $result: append($result, $item); }
        
      }
      
      @else { $result: append($result, $item); }
      
    }
    
    // Otherwise, flatten everything.
    @else {
      
      @if( is-list( $item ) ) { $result: join($result, flatten($item, $limit, $level + 1)); }
      @else { $result: append($result, $item); }
      
    }
    
  }
  
  @return $result;
  
}