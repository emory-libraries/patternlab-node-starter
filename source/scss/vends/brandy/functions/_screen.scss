////
/// @group brandy-screens
////

/// Converts a list of media query parameters to a map. If only a number is given as `$media`, then `max-width`
/// or `min-width` is assumed dependent upon whether `$max` is `true` or `false`, respectively.
///
/// @requires {function} is-list
/// @requires {function} contains
/// @requires {function} is-number
/// @requires {function} is-resolution
/// @requires {function} is-null
/// @requires {function} is-length
/// @requires {function} map-set
/// @requires {function} map-deep-get
/// @param {list | number} $media - A one or more media query parameters
/// @param {boolean} $max [true] - Whether numeric values given for `$media` are assumed as `max-` or `min-`
/// @returns {map} - Where `null` is used in place of any missing values
/// @throws 'Function `build-media` expects a list or number for argument `$media` but `#{type-of($media)}` was given.'
/// @throws 'Function `build-media` expects `true` or `false` for argument `$max` but `#{$max}` was given.'
@function build-media( $media, $max: true ){
  
  @if( not is-list($media) and not is-number($media) ) {
    
    @error 'Function `build-media` expects a list or number for argument `$media` but `#{type-of($media)}` was given.';
    
  }
  
  @if( not contains(true false, $max) ) {
    
    @error 'Function `build-media` expects `true` or `false` for argument `$max` but `#{$max}` was given.';
    
  }
  
  $result: (
    'any-hover': null,
    'any-pointer': null,
    'aspect-ratio': null,
    'color': null,
    'color-gamut': null,
    'color-index': null,
    'display-mode': null,
    'grid': null,
    'height': null,
    'hover': null,
    'inverted-colors': null,
    'light-level': null,
    'max-aspect-ratio': null,
    'max-color': null,
    'max-color-index': null,
    'max-height': null,
    'max-monochrome': null,
    'max-resolution': null,
    'max-width': null,
    'min-aspect-ratio': null,
    'min-color': null,
    'min-color-index': null,
    'min-height': null,
    'min-monochrome': null,
    'min-resolution': null,
    'min-width': null,
    'monochrome': null,
    'orientation': null,
    'overflow-block': null,
    'overflow-inline': null,
    'pointer': null,
    'resolution': null,
    'scan': null,
    'scripting': null,
    'update': null,
    'width': null
  );
  
  $number: (
    'aspect-ratio',
    'max-aspect-ratio',
    'min-aspect-ratio',
    'color-index',
    'max-color-index',
    'min-color-index',
    'width',
    'max-width',
    'min-width',
    'height',
    'max-height',
    'min-height',
    'monochrome',
    'max-monochrome',
    'min-monochrome',
    'color',
    'max-color',
    'min-color'
  );
  
  $resolution: (
    'resolution',
    'max-resolution',
    'min-resolution'
  );
  
  $keyword: (
    'color-gamut': srgb p3 rec2020,
    'orientation': portrait landscape,
    'scan': interlace progressive,
    'update': none slow fast,
    'overflow-block': none scroll optional-paged paged,
    'overflow-inline': none scroll,
    'display-mode': fullscreen standalone minimal-ui browser,
    'inverted-colors': none inverted,
    'pointer': none coarse fine,
    'any-pointer': none coarse fine,
    'hover': none hover,
    'any-hover': none hover,
    'light-level': dim normal washed,
    'scripting': none initial-only enabled
  );
  
  $boolean: (
    'grid': ('true': 1, 'false': 0),
    'color': ('true': true, 'false': null),
    'color-index': ('true': true, 'false': null),
    'monochrome': ('true': true, 'false': null)
  );

  // Assume a single value is max-width or min-width.
  @if( length($media) == 1 ) {
    
    @if( $max ) { $result: map-set($result, 'max-width', if(unitless($media), $media + 0px, $media)); }
    @else { $result: map-set($result, 'min-width', if(unitless($media), $media + 0px, $media)); }
    
  } 
  
  // Interpret all other values.
  @else {
    
    @for $n from 1 through length($media) {

      $key: nth($media, $n);

      @if( contains(map-keys($result), $key) ) {

        $value: nth($media, $n + 1);

        // Interprets number values.
        @if( contains($number, $key) and is-number($value) ) { 
          
          $result: map-set($result, $key, $value);

          $n: $n + 2;

        }
        
        // Interprets resolution values.
        @else if( contains($resolution, $key) and is-resolution($value) ) { 
          
          $result: map-set($result, $key, $value);

          $n: $n + 2;

        }
        
        // Interprets keyword values.
        @else if( map-has-key($keyword, $key) and contains(map-get($keyword, $key), $value) ) { 
          
          $result: map-set($result, $key, $value);

          $n: $n + 2;

        }
        
        // Interprets boolean values.
        @else if( map-has-key($boolean, $key) and contains(true false, $value) ) {
          
          $result: map-set($result, $key, map-deep-get($boolean, '#{$key}.#{$value}'));

          $n: $n + 2;

        }

      }
      
      @else if( is-length($key) ){
        
        $max-width: map-get($result, 'max-width');
        $min-width: map-get($result, 'min-width');

        // Find max-width first, then min-width.
        @if( $max ) {
          
          @if( is-null($max-width) ){ $result: map-set($result, 'max-width', if(unitless($key), $key + 0px, $key)); }
          @else if( is-null($min-width) ){ $result: map-set($result, 'min-width', if(unitless($key), $key + 0px, $key)); }
          
        }
        
        // Otherwise, find min-width first, then max-width.
        @else {
          
          @if( is-null($min-width) ){ $result: map-set($result, 'min-width', if(unitless($key), $key + 0px, $key)); }
          @else if( is-null($max-width) ){ $result: map-set($result, 'max-width', if(unitless($key), $key + 0px, $key)); }
          
        }

      }

    }
    
  }
  
  @return $result;
  
}