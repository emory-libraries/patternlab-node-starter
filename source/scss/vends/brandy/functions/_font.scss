////
/// @group brandy-fonts
////

/// Builds a font source declaration for use with `@font-face` definitions
///
/// @author Thoughtbot, Inc.
/// @requires {function} is-string
/// @requires {function} is-list
/// @requires {function} contains
/// @param {string} $family - The preferred name for the font family, also used for the main identifier in `.svg` files
/// @param {string} $path - The path to the font file, including the filename but excluding the file extension
/// @param {list} $formats ['ttf' 'woff' 'woff2' 'eot' 'svg'] - The available font formats as a list of file extensions
/// @param {string} $replacement ['-'] - A string used to replace spaces in font family names
/// @returns {list}
/// @throws 'Function `font-source` expects a string for argument `$family` but `#{type-of($family)}` was given.'
/// @throws 'Function `font-source` expects a string for argument `$path` but `#{type-of($path)}` was given.'
/// @throws 'Function `font-source` expects a string for argument `$replacement` but `#{type-of($replacement)}` was given.'
/// @throws 'Function `font-source` expects a list for argument `$formats` but `#{type-of($formats)}` was given.'
/// @throws 'Function `font-source` does not recognize the invalid font format `#{$format}`.'
@function font-source( $family, $path, $formats: 'ttf' 'woff' 'woff2' 'eot' 'svg', $replacement: '-' ) {
  
  @if( not is-string($family) ) {
    
    @error 'Function `font-source` expects a string for argument `$family` but `#{type-of($family)}` was given.';
    
  }
  
  @if( not is-string($path) ) {
    
    @error 'Function `font-source` expects a string for argument `$path` but `#{type-of($path)}` was given.';
    
  }
  
  @if( not is-string($replacement) ) {
    
    @error 'Function `font-source` expects a string for argument `$replacement` but `#{type-of($replacement)}` was given.';
    
  }
  
  @if( not is-list($formats) and not (is-string($formats) and length($formats) == 1) ) {
    
    @error 'Function `font-source` expects a list for argument `$formats` but `#{type-of($formats)}` was given.'
    
  }
  
  $family: str-replace($family, ' ', $replacement);
  
  $declarations: (
    'eot': url('#{$path}.eot?#iefix') format('embedded-opentype'),
    'woff': url('#{$path}.woff') format('woff'),
    'woff2': url('#{$path}.woff2') format('woff2'),
    'svg': url('#{$path}.svg##{$family}') format('svg'),
    'ttf': url('#{$path}.ttf') format('truetype')
  );
  
  @each $format in $formats {
    
    @if( not contains(map-keys($declarations), $format) ) {
      
      @error 'Function `font-source` does not recognize the invalid font format `#{$format}`.';
      
    }
    
  }
  
  $src: ();
  
  @each $key, $source in $declarations {
    
    @if( contains($formats, $key) ) {
      
      $src: append($src, $source, comma);
      
    }
    
  }
  
  @return $src;
  
}