////
/// @group brandy-numbers
////

/// Converts some string representation of a unit to its numeric digit
///
/// @param {string} $unit - Some string representation of a unit
/// @returns {number}
@function unit-to-digit( $unit ){
  
  @if( map-has-key($brandy-units, $unit) ) {
    
    @return map-get($brandy-units, $unit);
    
  }
  
  @return 0;
  
}

/// Converts one numerical unit to another
///
/// @author Jakob Eriksen
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {function} is-number
/// @requires {function} strip-unit
/// @requires {function} contains
/// @requires {variable} $brandy-units
/// @requires {variable} $brandy-font-size
/// @param {string | number} $value - Some numeric value
/// @param {string} $value - Some unit
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number | null}
/// @throws Cannot `convert-unit` for invalid unit `#{$unit}`.
/// @throws 'Cannot `convert-unit` when value `#{$value}` is non-numeric.'
@function convert-unit( $value, $unit, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Cannot `convert-unit` when value `#{$value}` is non-numeric.';
    
  }
    
  @if( not map-has-key($brandy-units, $unit) ) {
    
    @error 'Cannot `convert-unit` for invalid unit `#{$unit}`.';
    
  }
  
  $unit-value: map-get($brandy-units, $unit);
  
  @if( contains(ex ch vw vh vmin vmax, $unit) ) { 
    
    $value: strip-unit($value); 
  
  }
  
  @if( contains(em rem, unit($value)) ) { 
    
    $value: 0px + strip-unit($value) * $base / 1px; 
  
  }
  
  @if( contains(em rem, $unit) and not unitless($value) ) {
    
    $value: strip-unit(0px + $value) * 1px / $base;
    
  }
  
  @if( contains(dpi dpcm dppx, $unit) ) { 
    
    $unit-res: map-get($brandy-units, unit($value));
  
    $value: if(1dppx < 95dpi, strip-unit($unit-res + (strip-unit($value) + $unit-value)), $value);
  
  }
  
  @if( contains(khz hz, $unit) ) {
    
    $unit-freq: unit($value);
    
    @if( $unit-freq == 'khz' and $unit == 'hz' ) { $value: strip-unit($value) * 1000; }
    @if( $unit-freq == 'hz' and $unit == 'khz' ) { $value: strip-unit($value) / 1000; }
    
  }
  
  @return $unit-value + $value;
  
}

/// Strips a unit from a numeric value
/// 
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {function} is-number
/// @param {string | number} $value - Some numeric value
/// @returns {number | null}
/// @throws 'Cannot execute `strip-unit` when value `#{$value}` is non-numeric.'
@function strip-unit( $value ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }

  @if( is-number($value) ) {
    
    @if( unitless($value) ) { @return $value; }
    
    @return $value / ($value * 0 + 1);
    
  }
  
  @warn 'Cannot execute `strip-unit` when value `#{$value}` is non-numeric.';
  
  @return null;
  
}

/// Determines if a value is equivalent to a negative number
///
/// @requires {function} is-number
/// @requires {function} is-string
/// @requires {function} unit-to-digit
/// @requires {function} str-is-number
/// @requires {function} str-first
/// @param {mixed} $value - Some numeric value
/// @returns {boolean}
@function is-negative( $value ) {
  
  @if( is-number($value) ) {
    
    $unit: extract-unit($value);
    
    @return $value < (0 + unit-to-digit($unit));
    
  }
  
  @else if( is-string( $value ) ) {
    
    @if( str-is-number($value) ) {
      
      @return if( str-first($value) == '-', true, false );
      
    }
      
    @return false;
    
  }
  
  @return false;
  
}

/// Determines if a value is equivalent to a positive number
///
/// @requires {function} is-number
/// @requires {function} is-string
/// @requires {function} unit-to-digit
/// @requires {function} str-is-number
/// @param {mixed} $value - Some numeric value
/// @returns {boolean}
@function is-positive( $value ) {
  
  @if( is-number($value) ) {
    
    $unit: extract-unit($value);
    
    @return $value >= (0 + unit-to-digit($unit));
    
  }
  
  @else if( is-string( $value ) ) {
    
    @if( str-is-number($value) ) {
      
      @return if( str-slice($value, 1, 1) == '-', false, true );
      
    }
      
    @return false;
    
  }
  
  @return false;
  
}

/// Determines if a value is equal to zero
///
/// @requires {function} is-number
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} strip-unit
/// @requires {function} cast-number
/// @param {mixed} $value - Some numeric value
/// @returns {boolean}
@function is-zero( $value ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  
  @if( is-number($value) ) { @return strip-unit($value) == 0; }
  
  @return false;
  
}

/// Extracts the units from a numeric value
///
/// @requires {function} is-string
/// @requires {function} is-number
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some numeric value
/// @returns {string | null}
/// @throws 'Value `#{$value}` is non-numeric for `extract-unit`.'
@function extract-unit( $value ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  
  @if( is-number($value) ) { @return if( unitless($value), null, unit($value)); }
  
  @else {
  
    @warn 'Cannot execute `extract-unit` on non-numeric value `#{$value}`';
  
    @return null;
    
  }
  
}

/// Determines if a number is a percentage
///
/// @requires {function} is-number
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-percentage( $value ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }

  @return is-number($value) and unit($value) == '%'; 

}

/// Determines if a number is a percentage
///
/// @alias is-percentage
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-percent( $value ) { @return is-percentage($value); }

/// Determines if a number is even
///
/// @requires {function} is-number
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-even( $value ) { 
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  
  @return is-number($value) and strip-unit($value) % 2 == 0;

}

/// Determines if a number is odd
///
/// @requires {function} is-number
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-odd( $value ) { 
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  
  @return is-number($value) and strip-unit($value) % 2 != 0;

}

/// Determines if a number is an integer
///
/// @requires {function} is-number
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-integer( $value ) { 
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }

  @return is-number($value) and $value == round($value); 

}

/// Determines if a number is a float
///
/// @requires {function} is-number
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-float( $value ) { 
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }

  @return is-number($value) and $value != round($value); 

}

/// Determines if a number is an angle
///
/// @requires {function} is-number
/// @requires {function} contains
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-angle( $value ) { 
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  
  @return is-number($value) and contains('deg' 'rad' 'grad' 'turn', unit($value)); 

}

/// Determines if a number is an angle
///
/// @requires {function} is-number
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-frequency( $value ) { 
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  
  @return is-number($value) and contains('Hz' 'kHz' 'hz' 'khz', unit($value)); 

}

/// Determines if a number is a relative length
///
/// @requires {function} is-number
/// @requires {function} contains
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-relative-length( $value ) { 
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  
  @return is-number($value) and contains('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)); 

}

/// Determines if a number is an absolute length
///
/// @requires {function} is-number
/// @requires {function} contains
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-absolute-length( $value ) { 
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  
  @return is-number($value) and contains('cm' 'mm' 'in' 'px' 'pt' 'pc' 'pica', unit($value)); 

}

/// Determines if a number is a length
///
/// @requires {function} is-relative-length
/// @requires {function} is-absolute-length
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-length( $value ) { 
  
  @return is-relative-length($value) or is-absolute-length($value); 

}

/// Determines if a number is a resolution
///
/// @requires {function} is-number
/// @requires {function} contains
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-resolution( $value ) { 
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  
  @return is-number($value) and contains('dpi' 'dpcm' 'dppx', unit($value)); 

}

/// Determines whether some value is a time
///
/// @requires {function} is-number
/// @requires {function} contains
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-time( $value ) { 
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  
  @return is-number($value) and contains('ms' 's', unit($value)); 

}

/// Determines whether some value is a duration
///
/// @alias is-time
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-duration( $value ) { 
  
  @return is-time($value); 

}

/// Determines whether some value is equal to `NaN`
/// 
/// @requires {function} is-number
/// @requires {function} cast-string
/// @param {mixed} $value - Some value
/// @returns {boolean}
@function is-NaN( $value ) { 
  
  @return is-number($value) and cast-string($value) == 'NaN'; 

}

/// Inverts the sign of a number
///
/// @author Jason Nickel
/// @requires {function} is-positive
/// @requires {function} is-number
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {number} $number - Some number to invert
/// @returns {number}
/// @throws 'Cannot execute `inverse` with non-number `#{$number}`.'
@function inverse( $number ) {
  
  @if( is-string($number) and str-is-number($number) ) { $number: cast-number($number); }
  
  @if( not is-number($number) ) {
    
    @error 'Cannot execute `inverse` with non-number `#{$number}`.';
    
  }
  
  @return $number * -1;
  
}

/// Converts some numeric value to its `px` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `px` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `px` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `px` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function px( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `px` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `px` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `px` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, px, $base );
  
}

/// Converts some numeric value to its `pt` equivalent
///
/// @author Jakob Eriksen
/// @author {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `pt` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `pt` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `pt` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function pt( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `pt` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `pt` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `pt` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, pt, $base );
  
}

/// Converts some numeric value to its `pc` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `pc` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `pc` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `pc` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function pc( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `pc` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `pc` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `pc` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, pc, $base );
  
}

/// Converts some numeric value to its `in` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `in` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `in` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `in` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function in( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `in` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `in` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `in` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, in, $base );
  
}

/// Converts some numeric value to its `mm` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `mm` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `mm` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `mm` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function mm( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `mm` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `mm` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `mm` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, mm, $base );
  
}

/// Converts some numeric value to its `cm` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `cm` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `cm` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `cm` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function cm( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `cm` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `cm` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `cm` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, cm, $base );
  
}

/// Converts some numeric value to its `deg` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `deg` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `deg` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `deg` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function deg( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `deg` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `deg` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `deg` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, deg, $base );
  
}

/// Converts some numeric value to its `rad` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `rad` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `rad` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `rad` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function rad( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `rad` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `rad` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `rad` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, rad, $base );
  
}

/// Converts some numeric value to its `grad` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `grad` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `grad` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `grad` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function grad( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `grad` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `grad` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `grad` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, grad, $base );
  
}

/// Converts some numeric value to its `turn` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `turn` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `turn` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `turn` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function turn( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `turn` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `turn` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `turn` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, turn, $base );
  
}

/// Converts some numeric value to its `dpi` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `dpi` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `dpi` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `dpi` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function dpi( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($value) and str-is-number($value) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `dpi` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `dpi` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `dpi` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, dpi, $base );
  
}

/// Converts some numeric value to its `dpcm` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `dpcm` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `dpcm` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `dpcm` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function dpcm( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `dpcm` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `dpcm` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `dpcm` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, dpcm, $base );
  
}

/// Converts some numeric value to its `dppx` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `dppx` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `dppx` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `dppx` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function dppx( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `dppx` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `dppx` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `dppx` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, dppx, $base );
  
}

/// Converts some numeric value to its `ms` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `ms` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `ms` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `ms` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function ms( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `ms` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `ms` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `ms` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, ms, $base );
  
}

/// Converts some numeric value to its `s` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `s` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `s` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `s` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function s( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `s` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `s` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `s` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, s, $base );
  
}

/// Converts some numeric value to its `hz` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `hz` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `hz` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `hz` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function hz( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `hz` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `hz` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `hz` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, hz, $base );
  
}

/// Converts some numeric value to its `khz` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `khz` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `khz` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `khz` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function khz( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `khz` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `khz` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `khz` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, khz, $base );
  
}

/// Converts some numeric value to its `rem` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `rem` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `rem` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `rem` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function rem( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `rem` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `rem` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `rem` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, rem, $base );
  
}

/// Converts some numeric value to its `em` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `em` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `em` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `em` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function em( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `em` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `em` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `em` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  $em: convert-unit( $value, em, $base );
  
  @if( length($value) > 1 ) {
    
    @for $i from 2 through length($value) {
      
      $em: $em / strip-unit(em(nth($value, $i)));
      
    }
    
  }
  
  @return $em;
  
}

/// Converts some numeric value to its `ex` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `ex` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `ex` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `ex` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function ex( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `ex` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `ex` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `ex` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, ex, $base );
  
}

/// Converts some numeric value to its `ch` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `ch` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `ch` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `ch` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function ch( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `ch` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `ch` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `ch` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, ch, $base );
  
}

/// Converts some numeric value to its `vw` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `vw` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `vw` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `vw` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function vw( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `vw` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `vw` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `vw` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, vw, $base );
  
}

/// Converts some numeric value to its `vh` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `vh` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `vh` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `vh` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function vh( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `vh` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `vh` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `vh` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, vh, $base );
  
}

/// Converts some numeric value to its `vmin` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `vmin` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `vmin` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `vmin` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function vmin( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `vmin` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `vmin` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `vmin` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, vmin, $base );
  
}

/// Converts some numeric value to its `vmax` equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-number
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @requires {variable} $brandy-font-size
/// @param {number} $value - Some value to convert
/// @param {number} $base [$brandy-font-size] - The base size in `px`
/// @returns {number}
/// @throws 'Function `vmax` expects a number for argument `$value` but `#{type-of($value)}` was given.'
/// @throws 'Function `vmax` expects a number for argument `$base` but `#{type-of($base)}` was given.'
/// @throws 'Function `vmax` expects some `px` value for argument `$base` but `#{$base}` was given.'
@function vmax( $value, $base: $brandy-font-size ) {
  
  @if( is-string($value) and str-is-number($value) ) { $value: cast-number($value); }
  @if( is-string($base) and str-is-number($base) ) { $base: cast-number($base); }
  
  @if( not is-number($value) ) {
    
    @error 'Function `vmax` expects a number for argument `$value` but `#{type-of($value)}` was given.';
    
  }
  
  @if( not is-number($base) ) {
    
    @error 'Function `vmax` expects a number for argument `$base` but `#{type-of($base)}` was given.';
    
  }
  @else {
    
    @if( not unitless($base) and unit($base) != 'px' ) {
      
      @error 'Function `vmax` expects some `px` value for argument `$base` but `#{$base}` was given.';
      
    }
    
    @else { $base: $base + 0px; }
    
  }
  
  @return convert-unit( $value, vmax, $base );
  
}

/// Rounds a number to the a specific number of digits
///
/// @author Takeru Suzuki
/// @requires {function} is-number
/// @requires {function} is-float
/// @requires {function} contains
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {number} $number - Some number to round
/// @param {number} $digits [0] - The desired number of decimal places
/// @param {number} $mode [round] - The preferred mode for rounding numbers, either `round`, `ceil`, or `floor`
/// @returns {number}
/// @throws 'Cannot execute `decimal-round` on non-number `#{$number}`.'
/// @throws 'Function `decimal-round` expects a positive integer for argument `$digits` but `#{$digits}` was given.'
/// @throws 'Function `decimal-round` expects `round`, `ceil`, or `floor` for argument `$mode` but `#{$mode}` was given.'
@function decimal-round( $number, $digits: 0, $mode: round ) {
  
  @if( is-string($number) and str-is-number($number) ) { $number: cast-number($number); }
  
  @if( not is-number($number) ) {
    
    @error 'Cannot execute `decimal-round` on non-number `#{$number}`.';
    
  }
  
  @if( not is-number($digits) or $digits < 0 or is-float($digits) or not unitless($digits) ) {
    
    @error 'Function `decimal-round` expects a positive integer for argument `$digits` but `#{$digits}` was given.';
    
  }
  
  @if( not contains(round ceil floor, $mode) ) {
    
    @error 'Function `decimal-round` expects `round`, `ceil`, or `floor` for argument `$mode` but `#{$mode}` was given.';
    
  }
  
  $n: 1;
  
  @for $i from 1 through $digits { $n: $n * 10; } 
  
  @if( $mode == round ) { @return round($number * $n) / $n; }
  @else if( $mode == ceil ) { @return ceil($number * $n) / $n; }
  @else { @return floor($number * $n) / $n; }
  
}

/// Rounds a number up to the a specific number of digits
///
/// @author Takeru Suzuki
/// @requires {function} is-number
/// @requires {function} is-float
/// @requires {function} contains
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {number} $number - Some number to ceil
/// @param {number} $digits [0] - The desired number of decimal places
/// @returns {number}
/// @throws 'Cannot execute `decimal-ceil` on non-number `#{$number}`.'
/// @throws 'Function `decimal-ceil` expects a positive integer for argument `$digits` but `#{$digits}` was given.'
@function decimal-ceil( $number, $digits: 0 ) {
  
  @if( is-string($number) and str-is-number($number) ) { $number: cast-number($number); }
  
  @if( not is-number($number) ) {
    
    @error 'Cannot execute `decimal-ceil` on non-number `#{$number}`.';
    
  }
  
  @if( not is-number($digits) or $digits < 0 or is-float($digits) or not unitless($digits) ) {
    
    @error 'Function `decimal-ceil` expects a positive integer for argument `$digits` but `#{$digits}` was given.';
    
  }
  
  @return decimal-round( $number, $digits, ceil );
  
}

/// Rounds a number down to the a specific number of digits
///
/// @author Takeru Suzuki
/// @requires {function} is-number
/// @requires {function} is-float
/// @requires {function} contains
/// @requires {function} convert-unit
/// @requires {function} is-string
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {number} $number - Some number to ceil
/// @param {number} $digits [0] - The desired number of decimal places
/// @returns {number}
/// @throws 'Cannot execute `decimal-floor` on non-number `#{$number}`.'
/// @throws 'Function `decimal-floor` expects a positive integer for argument `$digits` but `#{$digits}` was given.'
@function decimal-floor( $number, $digits: 0 ) {
  
  @if( is-string($number) and str-is-number($number) ) { $number: cast-number($number); }
  
  @if( not is-number($number) ) {
    
    @error 'Cannot execute `decimal-floor` on non-number `#{$number}`.';
    
  }
  
  @if( not is-number($digits) or $digits < 0 or is-float($digits) or not unitless($digits) ) {
    
    @error 'Function `decimal-floor` expects a positive integer for argument `$digits` but `#{$digits}` was given.';
    
  }
  
  @return decimal-round( $number, $digits, floor );
  
}

/// Converts a number to its ratio (fraction) equivalent
///
/// @author Jakob Eriksen
/// @requires {function} is-null
/// @requires {function} is-string
/// @requires {function} is-number
/// @requires {function} is-float
/// @requires {function} decimal-round
/// @requires {function} str-is-number
/// @requires {function} cast-number
/// @param {number} $x - Some number
/// @param {number | null} $y [null] - Some other number or `null` otherwise
/// @param {number} $p [5] - The number of decimal places to consider for floats
/// @returns {string | null}
/// @throws 'Function `ratio` expects a number for argument `$x` but `#{type-of($x)}` was given.'
/// @throws 'Function `ratio` expects a number or `null` for argument `$y` but `#{type-of($y)}` was given.'
/// @throws 'Function `ratio` expects a positive integer for argument `$p` but `#{$p}` was given.'
@function ratio( $x, $y: null, $p: 5 ) {
  
  @if( is-string($x) and str-is-number($x) ) { $x: cast-number($x); }
  @if( is-string($y) and str-is-number($y) ) { $y: cast-number($y); }
  
  @if( not is-number($x) ) {
    
    @error 'Function `ratio` expects a number for argument `$x` but `#{type-of($x)}` was given.';
    
  }
  
  @if( not is-number($x) and not is-null($y) ) {
    
    @error 'Function `ratio` expects a number or `null` for argument `$y` but `#{type-of($y)}` was given.';
    
  }

  @if( not is-number($p) or not unitless($p) or is-float($p) or $p < 0 ) {
    
    @error 'Function `ratio` expects a positive integer for argument `$p` but `#{$p}` was given.';
    
  }
  
  @if( is-null($y) ) {
    
    $n: $x;
    $y: 1;
    
    @while( $y < 10 ) {
      
      $x: $n * 10 - ((10 - $y) * $n);
      
      @if( decimal-round($x, $p) == round($x) ) { @return #{round($x)}/#{$y}; }
    
      @else { $y: $y + 1; }
      
    }
  
    $x: decimal-round($n * 1000000, $p);
    $y: 1000000;

    @while( $x % 10 == 0 ) { $x: $x / 10; $y: $y / 10; }
  
    @while( $x % 5 == 0 ) { $x: $x / 5; $y: $y / 5; }
  
    @while( $x % 2 == 0 ) { $x: $x / 2; $y: $y / 2; }
  
    @return #{$x}/#{$y};
    
  }
  
  @else if( round($x) == decimal-round($x, $p) and round($y) == decimal-round($y, $p) ) { @return #{round($x)}/#{round($y)}; }

  @return null;

}

/// Converts a number to its fraction (ratio) equivalent
///
/// @author Jakob Eriksen
/// @alias ratio
/// @param {number} $x - Some number
/// @param {number | null} $y [null] - Some other number or `null` otherwise,
/// @param {number} $p - The number of decimal places to consider for floats
/// @returns {string | null}
/// @throws 'Function `fraction` expects a number for argument `$x` but `#{type-of($x)}` was given.'
/// @throws 'Function `fraction` expects a number of `null` for argument `$y` but `#{type-of($y)}` was given.'
/// @throws 'Function `fraction` expects a positive integer for argument `$p` but `#{$p}` was given.'
@function fraction( $x, $y: null, $p: 5 ) {
  
  @if( is-string($x) and str-is-number($x) ) { $x: cast-number($x); }
  @if( is-string($y) and str-is-number($y) ) { $y: cast-number($y); }
  
  @if( not is-number($x) ) {
    
    @error 'Function `fraction` expects a number for argument `$x` but `#{type-of($x)}` was given.';
    
  }
  
  @if( not is-number($x) and not is-null($y) ) {
    
    @error 'Function `fraction` expects a number or `null` for argument `$y` but `#{type-of($y)}` was given.';
    
  }

  @if( not is-number($p) or not unitless($p) or is-float($p) or $p < 0 ) {
    
    @error 'Function `fraction` expects a positive integer for argument `$p` but `#{$p}` was given.';
    
  }
  
  @return ratio($x, $y, $p);
  
}

/// Creates an evenly spaced numeric scale ranging from `$min` to `$max` based on the number of desired `$stops`. 
/// Can be either increasing or decreasing based on the value of `$increasing`. Typically used to
/// help scale fonts sizes, for instance, from `h1` to `h6`.
///
/// @requires {function} is-number
/// @requires {function} strip-unit
/// @param {number} $min [1] - Some numeric minimum, where `$min` and `$max` have the same units
/// @param {number} $max [1] - Some numeric maximum, where `$min` and `$max` have the same units
/// @returns {number} $stops [2] - The desired number of stops within the numeric scale, including the two end points `$min` and `$max`
/// @param {boolean} $increasing [false] - Whether the scale should be increasing or decreasing
/// @throws 'Function `numeric-scale` expects a number for argument `$min` but `#{type-of($min)}` was given.'
/// @throws 'Function `numeric-scale` expects a number for argument `$max` but `#{type-of($max)}` was given.'
/// @throws 'Function `numeric-scale` expects `$min` and `$max` to have the same units but `#{unit($min)}` and `#{unit($max)}` were given.'
/// @throws 'Function `numeric-scale` expects `$max` to be greater than or equal to `$min` but the opposite was true. The function will continue under the assumption that you meant for these values to be switched.'
/// @throws 'Function `numeric-scale` expects a number for argument `$stops` but `#{type-of($stops)}` was given.'
/// @throws 'Function `numeric-scale` expects a minimum value of 2 for argument `$stops` but `#{$stops}` was given.'
/// @throws 'Function `numeric-scale` expects `true` or `false` for argument `$increasing` but `#{$increasing}` was given.'
@function numeric-scale( $min: 1, $max: 1, $stops: 2, $increasing: false ) {
  
  @if( not is-number($min) ) {
    
    @error 'Function `numeric-scale` expects a number for argument `$min` but `#{type-of($min)}` was given.';
    
  }
  
  @if( not is-number($max) ) {
    
    @error 'Function `numeric-scale` expects a number for argument `$max` but `#{type-of($max)}` was given.';
    
  }
  
  @if( unit($min) != unit($max) ) {
    
    @error 'Function `numeric-scale` expects `$min` and `$max` to have the same units but `#{unit($min)}` and `#{unit($max)}` were given.';
    
  }
  
  @if( $min > $max ) { 
    
    @warn 'Function `numeric-scale` expects `$max` to be greater than or equal to `$min` but the opposite was true. ' +
          'The function will continue under the assumption that you meant for these values to be switched.';
    
    $temp: $min;
    $max: $min;
    $min: $temp;
    
  }
  
  @if( not is-number($stops) ) {
    
    @error 'Function `numeric-scale` expects a number for argument `$stops` but `#{type-of($stops)}` was given.';
    
  }
  
  @if( $stops < 2 ) {
    
    @error 'Function `numeric-scale` expects a minimum value of 2 for argument `$stops` but `#{$stops}` was given.';
    
  }
  
  @if( not unitless($stops) ) { $stops: strip-unit($stops); }
  
  @if( not contains(true false, $increasing) ) {
    
    @error 'Function `numeric-scale` expects `true` or `false` for argument `$increasing` but `#{$increasing}` was given.';
    
  }
  
  $scale: ();
  
  $first: if($increasing, 1, -$stops);
  
  $last: if($increasing, $stops, -1);
  
  @for $i from $first through $last {
    
    $factor: ($max - $min) * ((abs($i) - 1) / ($stops - 1)) + $min;
    
    $scale: append($scale, $factor, comma);
    
  }
  
  @return $scale;
  
}

/// Clamps a numeric value between a `$min` and `$max`
///
/// @requires {function} is-number
/// @param {number} $number - The number to clamp between `$min` and `$max`
/// @param {number} $min - Some minimum value
/// @param {number} $max - Some maximum value
/// @throws 'Function `clamp` expects a number for argument `$number` but `#{type-of($number)}` was given.'
/// @throws 'Function `clamp` expects a number for argument `$min` but `#{type-of($min)}` was given.'
/// @throws 'Function `clamp` expects a number for argument `$max` but `#{type-of($max)}` was given.'
/// @returns {numbers}
@function clamp( $number, $min, $max ) {
  
  @if( not is-number($number) ) {
    
    @error 'Function `clamp` expects a number for argument `$number` but `#{type-of($number)}` was given.';
    
  }
  
  @if( not is-number($min) ) {
    
    @error 'Function `clamp` expects a number for argument `$min` but `#{type-of($min)}` was given.';
    
  }
  
  @if( not is-number($max) ) {
    
    @error 'Function `clamp` expects a number for argument `$max` but `#{type-of($max)}` was given.';
    
  }
  
  @return min(max($number, $min), $max);
  
}