////
/// @group brandy-maps
////

/// Retrieves a property value from a nested map
/// 
/// @author Hugo Giraudel
/// @requires {function} is-map
/// @param {map} $map - Some nested map
/// @param {string} $key - A dot-delimited map property
/// @returns {mixed}
/// @throws 'Cannot execute `map-deep-get` on non-map #{$map}.'
@function map-deep-get( $map, $key ){
  
  @if( not is-map($map) ) {
    
    @error 'Cannot execute `map-deep-get` on non-map #{$map}.';
    
  }
  
  // Split keys.
  $keys: str-split($key, '.');

  @each $key in $keys {
        
    $map: map-get( $map, $key );
    
  }
    
  @return $map;
  
}

/// Sets a property value in a nested map
/// 
/// @author Hugo Giraudel
/// @requires {function} is-map
/// @requires {function} is-string
/// @requires {function} str-split
/// @requires {function} first
/// @requires {function} last
/// @param {map} $map - Some nested map
/// @param {string} $key - A dot-delimited map property
/// @param {mixed} $value - Some value
/// @returns {map}
/// @throws 'Cannot execute `map-deep-set` on non-map #{$map}.'
/// @throws 'Function `map-deep-set` expects a string for argument `$key` but `#{type-of($key)}` was given.'
/// @throws 'Cannot execute `map-deep-set` since key `#{$key}` does not exist at level #{$level} in map.'
@function map-deep-set( $map, $key, $value ){
  
  @if( not is-map($map) ) {
    
    @error 'Cannot execute `map-deep-set` on non-map #{$map}.';
    
  }
  
  @if( not is-string($key) ) {
    
    @error 'Function `map-deep-set` expects a string for argument `$key` but `#{type-of($key)}` was given.';
    
  }
  
  // Split keys.
  $keys: str-split($key, '.');
  
  // Handle non-nested keys.
  @if( length($keys) == 1 ) { @return map-merge($map, ($key: $value)); }
  
  // Otherwise, handle nested keys.
  $maps: ($map, );
  
  $level: 1;
    
  @for $i from 1 through (length($keys) - 1) { 
    
    $key: nth($keys, $i);
    $nested: map-get(last($maps), $key);
    
    @if( is-null($nested) ) {
      
      @error 'Cannot execute `map-deep-set` since key `#{$key}` does not exist at level #{$level} in map.';
      
    }
      
    $maps: append( $maps, $nested );
    $level: $level + 1;
    
  }
  
  $result: ();
  
  @for $i from length($maps) through 1 {
    
    $map: nth($maps, $i);
    $key: nth($keys, $i);
    $value: if( $i == length($maps), $value, $result );
    
    $result: map-merge($map, ($key: $value));
    
  }

  @return $result;
    
}

/// Determines the depth of a map
/// 
/// @author Hugo Giraudel
/// @requires {function} is-map
/// @param {map} $map - Some map
/// @returns {number}
/// @throws 'Cannot execute `map-depth` on non-map #{$map}.'
@function map-depth( $map ){
  
  @if( not is-map($map) ) {
    
    @error 'Cannot execute `map-depth` on non-map #{$map}.';
    
  }
    
  $levels: 1;
    
  @each $key, $value in $map {
        
    @if( type-of($value) == 'map') { $levels: max(map-depth($value) + 1, $levels); }
    
  }
    
  @return $levels;
    
}

/// Determines whether or not a map contains the one or more keys using dot-delimited syntax for keys
/// 
/// @author Hugo Giraudel
/// @requires {function} first
/// @requires {function} last
/// @requires {function} is-map
/// @param {map} $map - Some nested map
/// @param {string} $keys - A list of dot-delimited map properties to be searched for
/// @returns {boolean}
/// @throws 'Cannot execute `map-has-keys` on non-map #{$map}.'
@function map-has-keys( $map, $keys... ){
  
  @if( not is-map($map) ) {
    
    @error 'Cannot execute `map-has-keys` on non-map #{$map}.';
    
  }
    
  @each $key in $keys {
    
    // Split keys.
    $key: str-split($key, '.');
    
    // Get first and last.
    $first: first($key);
    $last: last($key);

    // Handle non-nested keys.
    @if( length($key) == 1 ) {
      
      @if( not map-has-key($map, $first) ) { @return false; }
      
    }
    
    // Handle nested keys.
    @else {
      
      $m: $map;
    
      // Look for keys.
      @each $k in $key {

        @if( not map-has-key($m, $k) ){ @return false; }
        
        $m: map-get($m, $k);

      }
      
    }
    
  }
    
  @return true;
    
}

/// Combines a list of keys and a list of values as a map
/// 
/// @author Hugo Giraudel
/// @requires {function} is-list
/// @param {list} $keys - A list of keys
/// @param {list} $values - A list of values
/// @returns {map}
/// @throws 'Function `map-combine` expects a list for argument `$keys` but `#{type-of($keys)}` was given.'
/// @throws 'Function `map-combine` expects a list for argument `$values` but `#{type-of($values)}` was given.'
@function map-combine( $keys, $values ){
  
  @if( not is-list($keys) ) {
    
    @error 'Function `map-combine` expects a list for argument `$keys` but `#{type-of($keys)}` was given.';
    
  }
  
  @if( not is-list($values) ) {
    
    @error 'Function `map-combine` expects a list for argument `$values` but `#{type-of($values)}` was given.';
    
  }
    
  $length-keys: length( $keys );
  $length-values: length( $values );
  $min: min( $length-keys, $length-values );
  $map: ();
    
  @if( $min == 0 ){ @return $map; }
    
  @for $i from 1 through $min {
    
    $map: map-merge( $map, (nth($keys, $i): nth($values, $i)) );
  }
    
  @return $map;
    
}

/// Inspired by jQuery, enables a map to be extended with one or more maps with optional recursion
/// 
/// @author Hugo Giraudel
/// @requires {function} is-map
/// @requires {function} is-boolean
/// @requires {function} last
/// @param {map} $map - Some map to be extended
/// @param {arglist} $maps - Additional maps to be used to extend the first map
/// @param {boolean} $shallow [false] - Passed in as the last argument, disables recursive mode
/// @returns {map}
/// @throws 'Cannot execute `map-extend` on non-map #{$map}.'
/// @throws 'Cannot execute `map-extend` with non-map `#{$current}`.'
@function map-extend( $map, $maps... /*, $shallow */ ){

  @if( not is-map($map) ) {
    
    @error 'Cannot execute `map-extend` on non-map #{$map}.';
    
  }

  $last: last($maps); 
  $deep: if( $last == true, false, true );
  $max: if( $last == true or $last == false, length($maps) - 1, length($maps) );
 
  @for $i from 1 through $max {
    
    $current: nth($maps, $i);
    
    @if( not is-map($current) ) {
      
      @error 'Cannot execute `map-extend` with non-map `#{$current}`.';
      
    }
        
    @if( not $deep ){ $map: map-merge( $map, $current ); }
        
    @else {
          
      @each $key, $value in $current {
                
        @if( is-map($value) and is-map(map-get($map, $key)) ){
                    
          $value: map-extend(map-get($map, $key), $value, true);
                
        }
                
        $map: map-merge( $map, ($key: $value) );
                
      }
        
    }
        
  }
    
  @return $map;
    
}

/// A simplified version of `map-merge()`, directly sets a map value
/// 
/// @author Miriam Suzanne
/// @requires {function} is-map
/// @requires {function} is-list
/// @requires {function} is-empty
/// @param {map} $map - Some map
/// @param {mixed} $key - Some map property
/// @param {mixed} $value - Some map value
/// @returns {map}
/// @throws 'Cannot execute `map-set` on non-map #{$map}.'
@function map-set( $map, $key, $value ){
  
  @if( not is-map($map) and not (is-list($map) and is-empty($map)) ) {
    
    @error 'Cannot execute `map-set` on non-map #{$map}.';
    
  }
  
  @return map-merge( $map, ($key: $value) );
  
}

/// Flattens a nested map to a single level of depth
///
/// @requires {function} map-set
/// @requires {function} is-map
/// @requires {function} is-string
/// @param {map} $map - Some map
/// @param {string} $delimiter ['.'] - Delimits previously nested map levels
/// @param {string} $prefix [''] - A prefix to be added to keys at the first map level, used for recursion
/// @returns {map}
/// @throws 'Cannot execute `map-flatten` on non-map #{$map}.'
/// @throws 'Function `map-flatten` expects a string for argument `$delimiter` but `#{type-of($delimiter)}` was given.'
/// @throws 'Function `map-flatten` expects a string for argument `$prefix` but `#{type-of($prefix)}` was given.'
@function map-flatten( $map, $delimiter: '.', $prefix: '' ){
  
  @if( not is-map($map) ) {
    
    @error 'Cannot execute `map-flatten` on non-map #{$map}.';
    
  }
  
  @if( not is-string($delimiter) ) {
    
    @error 'Function `map-flatten` expects a string for argument `$delimiter` but `#{type-of($delimiter)}` was given.';
    
  }
  
  @if( not is-string($prefix) ) {
    
    @error 'Function `map-flatten` expects a string for argument `$prefix` but `#{type-of($prefix)}` was given.';
    
  }
  
  $result: ();
  
  @each $key, $value in $map {
    
    $key: if( $prefix != '', $prefix + $delimiter + $key, $key );
    
    @if( is-map($value) ) { $result: map-merge($result, map-flatten($value, $delimiter, $key)); }
    
    @else { $result: map-set($result, $key, $value); }
    
  }
  
  @return $result;
  
}
