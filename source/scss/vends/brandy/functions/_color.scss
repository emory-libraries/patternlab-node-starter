////
/// @group brandy-colors
////

/// Calculates the brightness of a color
/// 
/// @author Brendan Saunders
/// @requires {function} is-color
/// @param {color} $color - Some color
/// @returns {number}
/// @throws 'Cannot get `brightness` on non-color `#{$color}`.'
@function brightness( $color ){
  
  @if( not is-color($color) ) {
    
    @error 'Cannot get `brightness` on non-color `#{$color}`.';
    
  }
    
  $R: red( $color ) * .299;
  $G: green( $color ) * .587;
  $B: blue( $color ) * .114;
    
  @return ($R + $G + $B) / 255 * 100%;
    
}

/// Calculates the luminance of a color
/// 
/// @author Pelle Wessman
/// @requires {function} is-color
/// @requires {function} pow
/// @param {color} $color - Some color
/// @returns {number}
/// @throws 'Cannot get `luminance` on non-color `#{$color}`.'
@function luminance( $color ){
  
  @if( not is-color($color) ) {
    
    @error 'Cannot get `luminance` on non-color `#{$color}`.';
    
  }
  
  $rgb: (red($color) / 255), (green($color)/ 255), (blue($color) / 255);
  
  @for $n from 1 through length($rgb) { 
    
    $x: nth($rgb, $n);
    
    $y: if( $x <= .03928, $x / 12.92, pow((($x + .055) / 1.055), 2.4) );

    $rgb: set-nth($rgb, $n, $y);
    
  }
  
  $r: nth($rgb, 1);
  $g: nth($rgb, 2);
  $b: nth($rgb, 3);
  
  @return .2126 * $r + .7152 * $g + .0722 * $b;
  
}

/// Calculates the contrast ratio between two colors
///
/// @author Mike Reithmuller
/// @requires {function} is-color
/// @requires {function} luminance
/// @param {color} $color1 - The first color to compare
/// @param {color} $color2 - The second color to compate
/// @returns {number}
/// @throws 'Function `contrast-ratio` expects a color for argument `$color1` but `#{type-of($color1)}` was given.'
/// @throws 'Function `contrast-ratio` expects a color for argument `$color2` but `#{type-of($color2)}` was given.'
@function contrast-ratio( $color1, $color2 ){ 
  
  @if( not is-color($color1) ) {
    
    @error 'Function `contrast-ratio` expects a color for argument `$color1` but `#{type-of($color1)}` was given.';
    
  }
  
  @if( not is-color($color2) ) {
    
    @error 'Function `contrast-ratio` expects a color for argument `$color2` but `#{type-of($color2)}` was given.';
    
  }

  $lumanince1: luminance($color1) + .05;
  $lumanince2: luminance($color2) + .05;

  @return max($lumanince1, $lumanince2) / min($lumanince1, $lumanince2);
  
}

/// Attempts to return a color that best contrasts the input `$color`
///
/// @author Mike Reithmuller
/// @requires {function} is-color
/// @requires {function} $brandy-dark-text
/// @requires {function} $brandy-light-text
/// @requires {function} $brandy-bg-contrast
/// @param {color} $color - Some color to contrast against
/// @param {color} $dark [$brandy-dark-text] - The dark color to be returned when contrasting against light colors
/// @param {color} $light [$brandy-light-text] - The light color to be returned when contrasting against dark colors
/// @returns {color}
/// @throws 'Function `color-contrast` expects a color for argument `$color` but `#{type-of($color)}` was given.'
/// @throws 'Function `color-contrast` expects a color for argument `$dark` but `#{type-of($dark)}` was given.'
/// @throws 'Function `color-contrast` expects a color for argument `$light` but `#{type-of($light)}` was given.'
/// @throws 'The colors `#{$color}`, `#{$dark}` (dark), and `#{$light}` (light) do not meet minimum WebAIM WCAG color contrast thresholds. WebAIM WCAG AAA expects a threshold >= 7, and AA expects a threshold >= 4.5. A maximum threshold of `#{$better-ratio}` was calculated. Please reconsider your color choice(s). For more information, visit http://webaim.org/resources/contrastchecker.'
@function color-contrast( $color, $dark: $brandy-dark-text, $light: $brandy-light-text ){
  
  @if( not is-color($color) ) {
    
    @error 'Function `color-contrast` expects a color for argument `$color` but `#{type-of($color)}` was given.';
    
  }
  
  @if( not is-color($dark) ) {
    
    @error 'Function `color-contrast` expects a color for argument `$dark` but `#{type-of($dark)}` was given.';
    
  }
  
  @if( not is-color($light) ) {
    
    @error 'Function `color-contrast` expects a color for argument `$light` but `#{type-of($light)}` was given.';
    
  }
  
  // Define accessibility contrast ratio thresholds.
  $WCAG: (7, 4.5);
  
  // Capture any non-ideal but better color choice.
  $better-ratio: 0;
  $better-color: null;

  // Start with the highest threshold.
  @for $index from 1 through length($WCAG) {
    
    $threshold: nth($WCAG, $index);
    
    /// Contrast against the given color.
    @if( $brandy-bg-contrast == true ){

      $max: 100%;
      $min: 0%;
      $increment: 5%;
      $range: $max - $min;
      $steps: $range / $increment;

      @for $step from 0 through $steps {

        $percent: $increment * $step + $min;

        $lighter: lighten($color, $percent);
        $lighter-ratio: contrast-ratio($color, $lighter);

        $darker: darken($color, $percent);
        $darker-ratio: contrast-ratio($color, $darker);

        @if( $lighter-ratio > $darker-ratio ) {
          
          @if( max($better-ratio, $lighter-ratio) == $lighter-ratio ) {
            
            $better-ratio: $lighter-ratio;
            $better-color: $lighter;
            
          }
          
          @if( $lighter-ratio >= $threshold ) { @return $lighter; }
          
        }
        
        @else {
          
          @if( max($better-ratio, $darker-ratio) == $darker-ratio ) {
            
            $better-ratio: $darker-ratio;
            $better-color: $darker;
            
          }
          
          @if( $darker-ratio >= $threshold ) { @return $darker; }
          
        }

      }
      
    }
    
    // Contrast against the dark and light colors.
    @else {
      
      $light-ratio: contrast-ratio($color, $light);
      $dark-ratio: contrast-ratio($color, $dark);

      @if( $light-ratio > $dark-ratio ) {
        
        @if( max($better-ratio, $light-ratio) == $light-ratio ) {
          
          $better-ratio: $light-ratio;
          $better-color: $light;
          
        }
        
        @if($light-ratio >= $threshold) { @return $light; }
        
      }
      
      @else {
        
        @if( max($better-ratio, $dark-ratio) == $dark-ratio ){
          
          $better-ratio: $dark-ratio;
          $better-color: $dark;
          
        }
        
        @if( $dark-ratio >= $threshold ) { @return $dark; }
        
      }

    }
    
  }
  
  @warn 'The colors `#{$color}`, `#{$dark}` (dark), and `#{$light}` (light) do not meet minimum WebAIM WCAG color contrast thresholds. WebAIM WCAG AAA expects a threshold >= 7, and AA expects a threshold >= 4.5. A maximum threshold of `#{$better-ratio}` was calculated. Please reconsider your color choice(s). For more information, visit http://webaim.org/resources/contrastchecker.';
  
  @return $better-color;
  
}

/// Outputs the HEX value of the color given
///
/// @requires {function} is-color
/// @param {color} $color - Some color
/// @returns {color} - In the form `rrggbb`
/// @throws 'Cannot execute `to-hex` on non-color `#{$color}`'
@function to-hex( $color ){
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `to-hex` on non-color `#{$color}`';
    
  }
    
  $dec: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15;
  $hex: 0 1 2 3 4 5 6 7 8 9 A  B  C  D  E  F;
    
  $r: red($color);
  $g: green($color);
  $b: blue($color);
    
  $r1: nth($hex, index($dec, floor( $r / 16 ) ));
  $r2: nth($hex, index($dec, floor( $r % 16 ) ));
  $g1: nth($hex, index($dec, floor( $g / 16 ) ));
  $g2: nth($hex, index($dec, floor( $g % 16 ) ));
  $b1: nth($hex, index($dec, floor( $b / 16) ));
  $b2: nth($hex, index($dec, floor( $b % 16) ));

  @return unquote(#{$r1}#{$r2}#{$g1}#{$g2}#{$b1}#{$b2});
    
};

/// Outputs the RGB value of the color given
///
/// @requires {function} is-color
/// @param {color} $color - Some color
/// @returns {list} - In the form `(r, g, b)`
/// @throws 'Cannot execute `to-rgb` on non-color `#{$color}`'
@function to-rgb( $color ){
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `to-rgb` on non-color `#{$color}`';
    
  }
    
  @return red($color), green($color), blue($color);
}

/// Outputs the HSV value of the color given
///
/// @requires {function} is-color
/// @requires {function} const
/// @requires {variable} $brandy-const-map
/// @param {color} $color - Some color
/// @returns {list} - In the form `(h, s, v)`
/// @throws 'Cannot execute `to-hsv` on non-color `#{$color}`'
@function to-hsv( $color ){
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `to-hsv` on non-color `#{$color}`';
    
  }
  
  $h: hue($color);
  $s: saturation($color);
  $l: lightness($color);
  
  @if( unit($h) == 'deg' ) { $h: const('PI') * 2 * ($h / 360deg); }
  @if( unit($s) == '%' ) { $s: $s / 100%; }
  @if( unit($l) == '%' ) { $l: $l / 100%; }

  $l: $l * 2;
  $l: if( $l <= 1, $s * $l, $s * (2 - $l) );
  $v: max(red($color) / 255, blue($color) / 255, green($color) / 255);
  $s: if( $l + $s != 0, (2 * $s) / ($l + $s), 0 );

  @return 360deg * $h / (const('PI') * 2), percentage(max(0, min(1, $s))), percentage($v);
  
}

/// Outputs the HSB value of the color given
///
/// @alias to-hsv
/// @requires {function} is-color
/// @requires {function} to-hsv
/// @param {color} $color - Some color
/// @returns {list} - In the form `(h, s, b)`
/// @throws 'Cannot execute `to-hsb` on non-color `#{$color}`'
@function to-hsb( $color ){
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `to-hsb` on non-color `#{$color}`';
    
  }
  
  @return to-hsv($color);
  
}

/// Outputs the HSL values of the color given
///
/// @requires {function} is-color
/// @param {color} $color - Some color
/// @returns {list} - In the form `(h, s, l)`
/// @throws 'Cannot execute `to-hsl` on non-color `#{$color}`'
@function to-hsl( $color ){
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `to-hsl` on non-color `#{$color}`';
    
  }
  
  @return hue($color), saturation($color), lightness($color);
  
}

/// Returns a valid color given CMYK values
///
/// @requires {function} is-number
/// @requires {function} is-float
/// @param {number} $c - A number representing a percentage of cyan
/// @param {number} $m - A number representing a percentage of magenta
/// @param {number} $y - A number representing a percentage of yellow
/// @param {number} $k [0] - A number representing a percentage of black
/// @returns {color}
/// @throws 'Function `cmyk` expects a number for argument `$c but `#{type-of($c)}` was given.'
/// @throws 'Function `cmyk` expects a number for argument `$m` but `#{type-of($m)}` was given.'
/// @throws 'Function `cmyk` expects a number for argument `$y` but `#{type-of($y)}` was given.'
/// @throws 'Function `cmyk` expects a number for argument `$k` but `#{type-of($k)}` was given.'
/// @throws 'Function `cmyk` expects a unitless whole number or percentage for argument `$c`.'
/// @throws 'Function `cmyk` expects a unitless whole number or percentage for argument `$m`.'
/// @throws 'Function `cmyk` expects a unitless whole number or percentage for argument `$y`.'
/// @throws 'Function `cmyk` expects a unitless whole number or percentage for argument `$k`.'
@function cmyk( $c, $m, $y, $k: 0 ) {
  
  @if( not is-number($c) ) {
    
    @error 'Function `cmyk` expects a number for argument `$c` but `#{type-of($c)}` was given.';
    
  }
  @else if( is-float($c) ) {
    
    @error 'Function `cmyk` expects a unitless whole number or percentage for argument `$c`.';
    
  }
  
  @if( not is-number($m) ) {
    
    @error 'Function `cmyk` expects a number for argument `$m` but `#{type-of($m)}` was given.';
    
  }
  @else if( is-float($m) ) {
    
    @error 'Function `cmyk` expects a unitless whole number or percentage for argument `$m`.';
    
  }
  
  @if( not is-number($y) ) {
    
    @error 'Function `cmyk` expects a number for argument `$y` but `#{type-of($y)}` was given.';
    
  }
  @else if( is-float($y) ) {
    
    @error 'Function `cmyk` expects a unitless whole number or percentage for argument `$y`.';
    
  }
  
  @if( not is-number($k) ) {
    
    @error 'Function `cmyk` expects a number for argument `$k` but `#{type-of($k)}` was given.';
    
  }
  @else if( is-float($k) ) {
    
    @error 'Function `cmyk` expects a unitless whole number or percentage for argument `$k`.';
    
  }
  
  @if( is-percentage($c) ) { $c: $c / 1%; }
  @if( is-percentage($m) ) { $m: $m / 1%; }
  @if( is-percentage($y) ) { $y: $y / 1%; }
  @if( is-percentage($k) ) { $k: $k / 1%; }
  
  $r: (1 - $k / 100) * (1 - $c / 100) * 255;
  $g: (1 - $k / 100) * (1 - $m / 100) * 255;
  $b: (1 - $k / 100) * (1 - $y / 100) * 255;
  
  @return rgb($r, $g, $b);
  
}

/// Returns a valid color given HSV values
///
/// @requires {function} is-number
/// @requires {function} const
/// @requires {variable} $brandy-const-map
/// @param {number} $h - A number representing hue, with or without units `deg`
/// @param {number} $s - A number representing saturation, with or without units `%`
/// @param {number} $v - A number representing brightness, with or without units `%`
/// @returns {color}
/// @throws 'Function `hsv` expects a number for argument `$h` but `#{type-of($h)}` was given.'
/// @throws 'Function `hsv` expects a number for argument `$s` but `#{type-of($s)}` was given.'
/// @throws 'Function `hsv` expects a number for argument `$v` but `#{type-of($v)}` was given.'
@function hsv( $h, $s: 0, $v: 0 ) {
  
  @if( not is-number($h) ) {
    
    @error 'Function `hsv` expects a number for argument `$h` but `#{type-of($h)}` was given.';
    
  }
  
  @if( not is-number($s) ) {
    
    @error 'Function `hsv` expects a number for argument `$s` but `#{type-of($s)}` was given.';
    
  }
  
  @if( not is-number($v) ) {
    
    @error 'Function `hsv` expects a number for argument `$v` but `#{type-of($v)}` was given.';
    
  }
  
  @if( unit($h) == 'deg' ) { $h: const('PI') * 2 * ($h / 360deg); }
  @if( unit($s) == '%' ) { $s: $s / 100%; }
  @if( unit($v) == '%' ) { $v: $v / 100%; }
  
  $ss: $s * $v;
  $ll: (2 - $s) * $v;
  
  @if( $ll == 2 or $ll == 0 ) { $ss: 0; }
  @else if( $ll <= 1 ) { $ss: $ss / $ll; }
  @else { $ss: $ss / (2 - $ll); }
  
  $ll: $ll / 2;
  
  $hsl: (360deg * $h / (const('PI') * 2)), percentage(max(0, min(1, $ss))), percentage(max(0, min(1, $ll)));
  
  @return hsl(nth($hsl, 1), nth($hsl, 2), nth($hsl, 3));
  
}

/// Returns a valid color given HSB values
///
/// @alias hsv
/// @requires {function} is-number
/// @requires {function} hsv
/// @param {number} $h - A number representing hue, with or without units `deg`
/// @param {number} $s - A number representing saturation, with or without units `%`
/// @param {number} $b - A number representing brightness, with or without units `%`
/// @returns {color}
/// @throws 'Function `hsb` expects a number for argument `$h` but `#{type-of($h)}` was given.'
/// @throws 'Function `hsb` expects a number for argument `$s` but `#{type-of($s)}` was given.'
/// @throws 'Function `hsb` expects a number for argument `$b` but `#{type-of($b)}` was given.'
@function hsb( $h, $s: 0, $b: 0 ) {
  
  @if( not is-number($h) ) {
    
    @error 'Function `hsb` expects a number for argument `$h` but `#{type-of($h)}` was given.';
    
  }
  
  @if( not is-number($s) ) {
    
    @error 'Function `hsb` expects a number for argument `$s` but `#{type-of($s)}` was given.';
    
  }
  
  @if( not is-number($b) ) {
    
    @error 'Function `hsb` expects a number for argument `$b` but `#{type-of($b)}` was given.';
    
  }
  
  @return hsv($h, $s, $b);
  
}

/// Returns the color mixed with `white` to create the desired tint amount
///
/// @author Hugo Giraudel
/// @requires {function} is-color
/// @requires {function} is-percentage
/// @param {color} $color - Some color to be tinted
/// @param {number} $percent - The percentage amount of tint to be applied
/// @returns {color}
/// @throws 'Cannot execute `tint` on non-color `#{$color}`'
/// @throws 'Function `tint` expects a percentage for argument `$percent` but `#{$percent}` was given.'
@function tint( $color, $percent ){
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `tint` on non-color `#{$color}`';
    
  }
  
  @if( not is-percent($percent) ) {
    
    @error 'Function `tint` expects a percentage for argument `$percent` but `#{$percent}` was given.';
    
  }
    
  @return mix(white, $color, $percent);
  
}

/// Returns the color mixed with `black` to create the desired shade amount
///
/// @author Hugo Giraudel
/// @requires {function} is-color
/// @requires {function} is-percentage
/// @param {color} $color - Some color to be shaded
/// @param {number} $percent - The percentage amount of shade to be applied
/// @returns {color}
/// @throws 'Cannot execute `shade` on non-color `#{$color}`'
/// @throws 'Function `shade` expects a percentage for argument `$percent` but `#{$percent}` was given.'
@function shade( $color, $percent ){
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `shade` on non-color `#{$color}`';
    
  }
  
  @if( not is-percent($percent) ) {
    
    @error 'Function `shade` expects a percentage for argument `$percent` but `#{$percent}` was given.';
    
  }
   
  @return mix(black, $color, $percent);
  
}

/// Returns the color mixed with `gray` to create the desired tone amount
///
/// @requires {function} is-color
/// @requires {function} is-percentage
/// @param {color} $color - Some color to be shaded
/// @param {number} $percent - The percentage amount of shade to be applied
/// @returns {color}
/// @throws 'Cannot execute `shade` on non-color `#{$color}`'
/// @throws 'Function `tone` expects a percentage for argument `$percent` but `#{$percent}` was given.'
@function tone( $color, $percent ){
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `tone` on non-color `#{$color}`';
    
  }
  
  @if( not is-percent($percent) ) {
    
    @error 'Function `tone` expects a percentage for argument `$percent` but `#{$percent}` was given.';
    
  }
   
  @return mix(gray, $color, $percent);
  
}

/// Generates a random color
/// 
/// @returns {color}
@function random-color() {
  
  $r: random(255);
  $g: random(255);
  $b: random(255);
  
  @return rgb($r, $g, $b);
  
}

/// Gets the complementary color of a given color
/// 
/// @requires {function} is-color
/// @param {color} $color - Some color
/// @returns {color}
/// @throws 'Cannot execute `color-complementary` on non-color `#{$color}`'
@function color-complementary( $color ) {
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `color-complementary` on non-color `#{$color}`';
    
  }
  
  $h: hue($color);
  $s: saturation($color);
  $l: lightness($color);
  $x: 180deg;
  
  $h: if($h >= $x, $h - $x, $h + $x);
  
  @return hsl($h, $s, $l);
  
}

/// Gets the triad colors of a given color
/// 
/// @requires {function} is-color
/// @param {color} $color - Some color
/// @returns {list} - A list of colors, where the first color is `$color`
/// @throws 'Cannot execute `color-triad` on non-color `#{$color}`'
@function color-triad( $color ) {
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `color-triad` on non-color `#{$color}`';
    
  }
  
  $h: hue($color);
  $s: saturation($color);
  $l: lightness($color);
  $x: 120deg;
  
  $h1: if($h + $x > 360deg, 360deg - ($h + $x), $h + $x);
  $h2: if($h - $x < 0deg, 360deg + ($h - $x), $h - $x);
  
  @return $color, hsl($h1, $s, $l), hsl($h2, $s, $l);
  
}

/// Gets the analogous colors of a given color
/// 
/// @requires {function} is-color
/// @param {color} $color - Some color
/// @returns {list} - A list of colors, where the first color is `$color`
/// @throws 'Cannot execute `color-analogous` on non-color `#{$color}`'
@function color-analogous( $color ) {
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `color-analogous` on non-color `#{$color}`';
    
  }
  
  $h: hue($color);
  $s: saturation($color);
  $l: lightness($color);
  $x: 30deg;
  
  $h1: if($h + $x > 360deg, 360deg - ($h + $x), $h + $x);
  $h2: if($h - $x < 0deg, 360deg + ($h - $x), $h - $x);
  
  @return $color, hsl($h1, $s, $l), hsl($h2, $s, $l);
  
}

/// Gets the split complementary colors of a given color
/// 
/// @requires {function} is-color
/// @requires {function} color-complementary
/// @requires {function} color-analogous
/// @param {color} $color - Some color
/// @returns {list} - A list of colors, where the first color is `$color`
/// @throws 'Cannot execute `color-split-complementary` on non-color `#{$color}`'
@function color-split-complementary( $color ) {
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `color-split-complementary` on non-color `#{$color}`';
    
  }
  
  $complementary: color-complementary($color);
  $analogous: color-analogous($complementary);
  
  @return $color, nth($analogous, 2), nth($analogous, 3);
  
}

/// Gets the rectangle colors of a given color
/// 
/// @requires {function} is-color
/// @requires {function} color-complementary
/// @param {color} $color - Some color
/// @returns {list} - A list of colors, where the first color is `$color`
/// @throws 'Cannot execute `color-rectangle` on non-color `#{$color}`'
@function color-rectangle( $color ) {
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `color-rectangle` on non-color `#{$color}`';
    
  }
  
  $complementary: color-complementary($color);
  
  $x: 60deg;
  
  $h: hue($color);
  $hc: hue($complementary);
  $s: saturation($color);
  $l: lightness($color);
  
  $h1: if($h - $x <= 0deg, 360deg + ($h - $x), $h - $x);
  $h2: if($hc - $x <= 0deg, 360deg + ($hc + $x), $hc - $x); 
  
  @return $color, hsl($h1, $s, $l), $complementary, hsl($h2, $s, $l);
  
}

/// Gets the square colors of a given color
/// 
/// @requires {function} is-color
/// @requires {function} color-complementary
/// @param {color} $color - Some color
/// @returns {list} - A list of colors, where the first color is `$color`
/// @throws 'Cannot execute `color-square` on non-color `#{$color}`'
@function color-square( $color ) {
  
  @if( not is-color($color) ) {
    
    @error 'Cannot execute `color-square` on non-color `#{$color}`';
    
  }
  
  $complementary: color-complementary($color);
  
  $x: 90deg;
  
  $h: hue($color);
  $hc: hue($complementary);
  $s: saturation($color);
  $l: lightness($color);
  
  $h1: if($h - $x <= 0deg, 360deg + ($h - $x), $h - $x);
  $h2: if($hc - $x <= 0deg, 360deg + ($hc + $x), $hc - $x); 
  
  @return $color, hsl($h1, $s, $l), $complementary, hsl($h2, $s, $l);
  
}

/// Gets `$x` number of colors between the two given colors
/// 
/// @requires {function} is-color
/// @requires {function} is-number
/// @param {color} $color1 - The first color to use
/// @param {color} $color2 - The second color to use
/// @param {number} $x [0] - The desired number of stops to produce
/// @returns {list} - A list of colors, where the first color is `$color1` and last color is `$color2`
/// @throws 'Function `color-stops` expects a color for argument `$color1` but `#{type-of($color1)}` was given.'
/// @throws 'Function `color-stops` expects a color for argument `$color2` but `#{type-of($color2)}` was given.'
/// @throws 'Function `color-stops` expects a number for argument `$x` but `#{type-of($x)}` was given.'
/// @throws 'Function `color-stops` expects a positive integer for argument `$x` but `#{$x}` was given.'
@function color-stops( $color1, $color2, $x: 0 ) {
  
  @if( not is-color($color1) ) {
    
    @error 'Function `color-stops` expects a color for argument `$color1` but `#{type-of($color1)}` was given.';
    
  }
  
  @if( not is-color($color2) ) {
    
    @error 'Function `color-stops` expects a color for argument `$color2` but `#{type-of($color2)}` was given.';
    
  }
  
  @if( not is-number($x) ) {
    
    @error 'Function `color-stops` expects a number for argument `$x` but `#{type-of($x)}` was given.';
    
  }
  
  @if( $x < 0 ) {
    
    @error 'Function `color-stops` expects a positive integer for argument `$x` but `#{$x}` was given.';
    
  }
  
  $stops: ();
  
  @for $i from 0 through ($x + 1) {
    
    $percent: ($i / ($x + 1)) * 100%;
    
    $stops: append($stops, mix($color2, $color1, $percent), comma);
    
  }
  
  @return $stops;
  
}

/// Gets `$x` number of tints between the given `$min` and `$max` tint percentages
/// 
/// @requires {function} is-color
/// @requires {function} is-number
/// @requires {function} is-percentage
/// @requires {function} tint
/// @param {color} $color - Some color
/// @param {number} $x [0] - The desired number of tints to produce
/// @param {number} $min [0%] - The minimum tint percentage to use
/// @param {number} $max [100%] - The maximum tint percentage to use
/// @returns {list} - A list of colors, where the first color is `$color` and last color is `white` if default `$min` and `$max` are used
/// @throws 'Function `color-tints` expects a color for argument `$color` but `#{type-of($color)}` was given.'
/// @throws 'Function `color-tints` expects a number for argument `$x` but `#{type-of($x)}` was given.'
/// @throws 'Function `color-tints` expects a percentage for argument `$min` but `#{$min}` was given.'
/// @throws 'Function `color-tints` expects a percentage for argument `$max` but `#{$max}` was given.'
/// @throws 'Function `color-tints` expects a positive integer for argument `$x` but `#{$x}` was given.'
@function color-tints( $color, $x: 0, $min: 0%, $max: 100% ) {
  
  @if( not is-color($color) ) {
    
    @error 'Function `color-tints` expects a color for argument `$color` but `#{type-of($color)}` was given.';
    
  }
  
  @if( not is-number($x) ) {
    
    @error 'Function `color-tints` expects a number for argument `$x` but `#{type-of($x)}` was given.';
    
  }
  
  @if( not is-percentage($min) ) {
    
    @error 'Function `color-tints` expects a percentage for argument `$min` but `#{$min}` was given.';
    
  }
  
  @if( not is-percentage($max) ) {
    
    @error 'Function `color-tints` expects a percentage for argument `$max` but `#{$max}` was given.';
    
  }
  
  @if( $x < 0 ) {
    
    @error 'Function `color-tints` expects a positive integer for argument `$x` but `#{$x}` was given.';
    
  }
  
  $tints: ();
  
  @for $i from 0 through ($x + 1) {
    
    $percent: ($max - $min) * ($i / ($x + 1));
    
    $tints: append($tints, tint($color, $percent), comma);
    
  }
  
  @return $tints;
  
}

/// Gets `$x` number of shades between the given `$min` and `$max` shade percentages
/// 
/// @requires {function} is-color
/// @requires {function} is-number
/// @requires {function} is-percentage
/// @requires {function} shade
/// @param {color} $color - Some color
/// @param {number} $x [0] - The desired number of shades to produce
/// @param {number} $min [0%] - The minimum shade percentage to use
/// @param {number} $max [100%] - The maximum shade percentage to use
/// @returns {list} - A list of colors, where the first color is `$color` and last color is `black` if default `$min` and `$max` are used
/// @throws 'Function `color-shades` expects a color for argument `$color` but `#{type-of($color)}` was given.'
/// @throws 'Function `color-shades` expects a number for argument `$x` but `#{type-of($x)}` was given.'
/// @throws 'Function `color-shades` expects a percentage for argument `$min` but `#{$min}` was given.'
/// @throws 'Function `color-shades` expects a percentage for argument `$max` but `#{$max}` was given.'
/// @throws 'Function `color-shades` expects a positive integer for argument `$x` but `#{$x}` was given.'
@function color-shades( $color, $x: 0, $min: 0%, $max: 100% ) {
  
  @if( not is-color($color) ) {
    
    @error 'Function `color-shades` expects a color for argument `$color` but `#{type-of($color)}` was given.';
    
  }
  
  @if( not is-number($x) ) {
    
    @error 'Function `color-shades` expects a number for argument `$x` but `#{type-of($x)}` was given.';
    
  }
  
  @if( not is-percentage($min) ) {
    
    @error 'Function `color-shades` expects a percentage for argument `$min` but `#{$min}` was given.';
    
  }
  
  @if( not is-percentage($max) ) {
    
    @error 'Function `color-shades` expects a percentage for argument `$max` but `#{$max}` was given.';
    
  }
  
  @if( $x < 0 ) {
    
    @error 'Function `color-shades` expects a positive integer for argument `$x` but `#{$x}` was given.';
    
  }
  
  $shades: ();
  
  @for $i from 0 through ($x + 1) {
    
    $percent: ($max - $min) * ($i / ($x + 1));
    
    $shades: append($shades, shade($color, $percent), comma);
    
  }
  
  @return $shades;
  
}

/// Gets `$x` number of tones between the given `$min` and `$max` tone percentages
/// 
/// @requires {function} is-color
/// @requires {function} is-number
/// @requires {function} is-percentage
/// @requires {function} tone
/// @param {color} $color - Some color
/// @param {number} $x [0] - The desired number of tones to produce
/// @param {number} $min [0%] - The minimum tone percentage to use
/// @param {number} $max [100%] - The maximum tone percentage to use
/// @returns {list} - A list of colors, where the first color is `$color` and last color is `gray` if default `$min` and `$max` are used
/// @throws 'Function `color-tones` expects a color for argument `$color` but `#{type-of($color)}` was given.'
/// @throws 'Function `color-tones` expects a number for argument `$x` but `#{type-of($x)}` was given.'
/// @throws 'Function `color-tones` expects a percentage for argument `$min` but `#{$min}` was given.'
/// @throws 'Function `color-tones` expects a percentage for argument `$max` but `#{$max}` was given.'
/// @throws 'Function `color-tones` expects a positive integer for argument `$x` but `#{$x}` was given.'
@function color-tones( $color, $x: 0, $min: 0%, $max: 100% ) {
  
  @if( not is-color($color) ) {
    
    @error 'Function `color-tones` expects a color for argument `$color` but `#{type-of($color)}` was given.';
    
  }
  
  @if( not is-number($x) ) {
    
    @error 'Function `color-tones` expects a number for argument `$x` but `#{type-of($x)}` was given.';
    
  }
  
  @if( not is-percentage($min) ) {
    
    @error 'Function `color-tones` expects a percentage for argument `$min` but `#{$min}` was given.';
    
  }
  
  @if( not is-percentage($max) ) {
    
    @error 'Function `color-tones` expects a percentage for argument `$max` but `#{$max}` was given.';
    
  }
  
  @if( $x < 0 ) {
    
    @error 'Function `color-tones` expects a positive integer for argument `$x` but `#{$x}` was given.';
    
  }
  
  $tones: ();
  
  @for $i from 0 through ($x + 1) {
    
    $percent: ($max - $min) * ($i / ($x + 1));
    
    $tones: append($tones, tone($color, $percent), comma);
    
  }
  
  @return $tones;
  
}