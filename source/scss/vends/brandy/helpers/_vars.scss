////
/// @group brandy-utils
////

/// Adds one or more new button selectors to the global selector variable `$all-buttons`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin add-buttons( $selectors... ) {
  
  $global: stringify($all-buttons);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `add-buttons` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( not contains($global, $selector) ) { $global: append($global, $selector, comma); }
    
  }
  
  $all-buttons: selector($global) !global;
  $all-buttons-hover: selector($all-buttons, ':hover') !global;
  $all-buttons-focus: selector($all-buttons, ':focus') !global;
  $all-buttons-active: selector($all-buttons, ':active') !global;
  $all-buttons-disabled: selector($all-buttons, '[disabled]') !global;
  
}

/// Removes one or more button selectors from the global selector variable `$all-buttons`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin remove-buttons( $selectors... ) {
  
  $global: stringify($all-buttons);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `remove-buttons` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( contains($global, $selector) ) { $global: remove($global, $selector); }
    
  }
  
  $all-buttons: selector($global) !global;
  $all-buttons-hover: selector($all-buttons, ':hover') !global;
  $all-buttons-focus: selector($all-buttons, ':focus') !global;
  $all-buttons-active: selector($all-buttons, ':active') !global;
  $all-buttons-disabled: selector($all-buttons, '[disabled]') !global;
  
}

/// Adds one or more new text input selectors to the global selector variable `$all-text-inputs`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin add-text-inputs( $selectors... ) {
  
  $global: stringify($all-text-inputs);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `add-text-inputs` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( not contains($global, $selector) ) { $global: append($global, $selector, comma); }
    
  }
  
  $all-text-inputs: selector($global) !global;
  $all-text-inputs-hover: selector( $all-text-inputs, ':hover' ) !global;
  $all-text-inputs-focus: selector( $all-text-inputs, ':focus' ) !global;
  $all-text-inputs-active: selector( $all-text-inputs, ':active' ) !global;
  $all-text-inputs-invalid: selector( $all-text-inputs, ':invalid' ) !global;
  $all-text-inputs-disabled: selector( $all-text-inputs, '[disabled]' ) !global;
  $all-text-inputs-required: selector( $all-text-inputs, '[required]' ) !global;
  $all-verbage-inputs: join( $all-text-inputs, $all-list-inputs ) !global;
  $all-verbage-inputs-hover: selector( $all-verbage-inputs, ':hover' ) !global;
  $all-verbage-inputs-focus: selector( $all-verbage-inputs, ':focus' ) !global;
  $all-verbage-inputs-active: selector( $all-verbage-inputs, ':active' ) !global;
  $all-verbage-inputs-multiple: selector( $all-verbage-inputs, '[multiple]' ) !global;
  $all-verbage-inputs-disabled: selector( $all-verbage-inputs, '[disabled]' ) !global;
  $all-verbage-inputs-required: selector( $all-verbage-inputs, '[required]' ) !global;
  $all-inputs: join( $all-verbage-inputs, $all-toggle-inputs, $all-file-inputs ) !global;
  $all-inputs-hover: selector( $all-inputs, ':hover' ) !global;
  $all-inputs-focus: selector( $all-inputs, ':focus' ) !global;
  $all-inputs-active: selector( $all-inputs, ':active' ) !global;
  $all-inputs-multiple: selector( $all-inputs, '[multiple]' ) !global;
  $all-inputs-disabled: selector( $all-inputs, '[disabled]' ) !global;
  $all-inputs-required: selector( $all-inputs, '[required]' ) !global;
  
}

/// Removes one or more text input selectors from the global selector variable `$all-text-inputs`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin remove-text-inputs( $selectors... ) {
  
  $global: stringify($all-text-inputs);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `remove-text-inputs` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( contains($global, $selector) ) { $global: remove($global, $selector); }
    
  }
  
  $all-text-inputs: selector($global) !global;
  $all-text-inputs-hover: selector( $all-text-inputs, ':hover' ) !global;
  $all-text-inputs-focus: selector( $all-text-inputs, ':focus' ) !global;
  $all-text-inputs-active: selector( $all-text-inputs, ':active' ) !global;
  $all-text-inputs-invalid: selector( $all-text-inputs, ':invalid' ) !global;
  $all-text-inputs-disabled: selector( $all-text-inputs, '[disabled]' ) !global;
  $all-text-inputs-required: selector( $all-text-inputs, '[required]' ) !global;
  $all-verbage-inputs: join( $all-text-inputs, $all-list-inputs ) !global;
  $all-verbage-inputs-hover: selector( $all-verbage-inputs, ':hover' ) !global;
  $all-verbage-inputs-focus: selector( $all-verbage-inputs, ':focus' ) !global;
  $all-verbage-inputs-active: selector( $all-verbage-inputs, ':active' ) !global;
  $all-verbage-inputs-multiple: selector( $all-verbage-inputs, '[multiple]' ) !global;
  $all-verbage-inputs-disabled: selector( $all-verbage-inputs, '[disabled]' ) !global;
  $all-verbage-inputs-required: selector( $all-verbage-inputs, '[required]' ) !global;
  $all-inputs: join( $all-verbage-inputs, $all-toggle-inputs, $all-file-inputs ) !global;
  $all-inputs-hover: selector( $all-inputs, ':hover' ) !global;
  $all-inputs-focus: selector( $all-inputs, ':focus' ) !global;
  $all-inputs-active: selector( $all-inputs, ':active' ) !global;
  $all-inputs-multiple: selector( $all-inputs, '[multiple]' ) !global;
  $all-inputs-disabled: selector( $all-inputs, '[disabled]' ) !global;
  $all-inputs-required: selector( $all-inputs, '[required]' ) !global;
  
}

/// Adds one or more new list input selectors to the global selector variable `$all-list-inputs`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin add-list-inputs( $selectors... ) {
  
  $global: stringify($all-list-inputs);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `add-list-inputs` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( not contains($global, $selector) ) { $global: append($global, $selector, comma); }
    
  }
  
  $all-list-inputs: selector($global) !global;
  $all-list-inputs-hover: selector( $all-list-inputs, ':hover' ) !global;
  $all-list-inputs-focus: selector( $all-list-inputs, ':focus' ) !global;
  $all-list-inputs-active: selector( $all-list-inputs, ':active' ) !global;
  $all-list-inputs-multiple: selector( $all-list-inputs, '[multiple]' ) !global;
  $all-list-inputs-disabled: selector( $all-list-inputs, '[disabled]' ) !global;
  $all-list-inputs-required: selector( $all-list-inputs, '[required]' ) !global;
  $all-verbage-inputs: join( $all-text-inputs, $all-list-inputs ) !global;
  $all-verbage-inputs-hover: selector( $all-verbage-inputs, ':hover' ) !global;
  $all-verbage-inputs-focus: selector( $all-verbage-inputs, ':focus' ) !global;
  $all-verbage-inputs-active: selector( $all-verbage-inputs, ':active' ) !global;
  $all-verbage-inputs-multiple: selector( $all-verbage-inputs, '[multiple]' ) !global;
  $all-verbage-inputs-disabled: selector( $all-verbage-inputs, '[disabled]' ) !global;
  $all-verbage-inputs-required: selector( $all-verbage-inputs, '[required]' ) !global;
  $all-inputs: join( $all-verbage-inputs, $all-toggle-inputs, $all-file-inputs ) !global;
  $all-inputs-hover: selector( $all-inputs, ':hover' ) !global;
  $all-inputs-focus: selector( $all-inputs, ':focus' ) !global;
  $all-inputs-active: selector( $all-inputs, ':active' ) !global;
  $all-inputs-multiple: selector( $all-inputs, '[multiple]' ) !global;
  $all-inputs-disabled: selector( $all-inputs, '[disabled]' ) !global;
  $all-inputs-required: selector( $all-inputs, '[required]' ) !global;
  
}

/// Removes one or more list input selectors from the global selector variable `$all-list-inputs`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin remove-list-inputs( $selectors... ) {
  
  $global: stringify($all-list-inputs);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `remove-list-inputs` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( contains($global, $selector) ) { $global: remove($global, $selector); }
    
  }
  
  $all-list-inputs: selector($global) !global;
  $all-list-inputs-hover: selector( $all-list-inputs, ':hover' ) !global;
  $all-list-inputs-focus: selector( $all-list-inputs, ':focus' ) !global;
  $all-list-inputs-active: selector( $all-list-inputs, ':active' ) !global;
  $all-list-inputs-multiple: selector( $all-list-inputs, '[multiple]' ) !global;
  $all-list-inputs-disabled: selector( $all-list-inputs, '[disabled]' ) !global;
  $all-list-inputs-required: selector( $all-list-inputs, '[required]' ) !global;
  $all-verbage-inputs: join( $all-text-inputs, $all-list-inputs ) !global;
  $all-verbage-inputs-hover: selector( $all-verbage-inputs, ':hover' ) !global;
  $all-verbage-inputs-focus: selector( $all-verbage-inputs, ':focus' ) !global;
  $all-verbage-inputs-active: selector( $all-verbage-inputs, ':active' ) !global;
  $all-verbage-inputs-multiple: selector( $all-verbage-inputs, '[multiple]' ) !global;
  $all-verbage-inputs-disabled: selector( $all-verbage-inputs, '[disabled]' ) !global;
  $all-verbage-inputs-required: selector( $all-verbage-inputs, '[required]' ) !global;
  $all-inputs: join( $all-verbage-inputs, $all-toggle-inputs, $all-file-inputs ) !global;
  $all-inputs-hover: selector( $all-inputs, ':hover' ) !global;
  $all-inputs-focus: selector( $all-inputs, ':focus' ) !global;
  $all-inputs-active: selector( $all-inputs, ':active' ) !global;
  $all-inputs-multiple: selector( $all-inputs, '[multiple]' ) !global;
  $all-inputs-disabled: selector( $all-inputs, '[disabled]' ) !global;
  $all-inputs-required: selector( $all-inputs, '[required]' ) !global;
  
}

/// Adds one or more new file input selectors to the global selector variable `$all-file-inputs`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin add-file-inputs( $selectors... ) {
  
  $global: stringify($all-file-inputs);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `add-file-inputs` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( not contains($global, $selector) ) { $global: append($global, $selector, comma); }
    
  }
  
  $all-file-inputs: selector($global) !global;
  $all-file-inputs-multiple: selector( $all-file-inputs, '[multiple]' ) !global;
  $all-file-inputs-disabled: selector( $all-file-inputs, '[disabled]' ) !global;
  $all-file-inputs-required: selector( $all-file-inputs, '[required]' ) !global;
  $all-inputs: join( $all-verbage-inputs, $all-toggle-inputs, $all-file-inputs ) !global;
  $all-inputs-hover: selector( $all-inputs, ':hover' ) !global;
  $all-inputs-focus: selector( $all-inputs, ':focus' ) !global;
  $all-inputs-active: selector( $all-inputs, ':active' ) !global;
  $all-inputs-multiple: selector( $all-inputs, '[multiple]' ) !global;
  $all-inputs-disabled: selector( $all-inputs, '[disabled]' ) !global;
  $all-inputs-required: selector( $all-inputs, '[required]' ) !global;
  
}

/// Removes one or more file input selectors from the global selector variable `$all-file-inputs`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin remove-file-inputs( $selectors... ) {
  
  $global: stringify($all-file-inputs);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `remove-file-inputs` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( contains($global, $selector) ) { $global: remove($global, $selector); }
    
  }
  
  $all-file-inputs: selector($global) !global;
  $all-file-inputs-multiple: selector( $all-file-inputs, '[multiple]' ) !global;
  $all-file-inputs-disabled: selector( $all-file-inputs, '[disabled]' ) !global;
  $all-file-inputs-required: selector( $all-file-inputs, '[required]' ) !global;
  $all-inputs: join( $all-verbage-inputs, $all-toggle-inputs, $all-file-inputs ) !global;
  $all-inputs-hover: selector( $all-inputs, ':hover' ) !global;
  $all-inputs-focus: selector( $all-inputs, ':focus' ) !global;
  $all-inputs-active: selector( $all-inputs, ':active' ) !global;
  $all-inputs-multiple: selector( $all-inputs, '[multiple]' ) !global;
  $all-inputs-disabled: selector( $all-inputs, '[disabled]' ) !global;
  $all-inputs-required: selector( $all-inputs, '[required]' ) !global;
  
}

/// Adds one or more new toggle input selectors to the global selector variable `$all-toggle-inputs`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin add-toggle-inputs( $selectors... ) {
  
  $global: stringify($all-toggle-inputs);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `add-toggle-inputs` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( not contains($global, $selector) ) { $global: append($global, $selector, comma); }
    
  }
  
  $all-toggle-inputs: selector($global) !global;
  $all-toggle-inputs-hover: selector( $all-toggle-inputs, ':hover' ) !global;
  $all-toggle-inputs-focus: selector( $all-toggle-inputs, ':focus' ) !global;
  $all-toggle-inputs-active: selector( $all-toggle-inputs, ':active' ) !global;
  $all-toggle-inputs-disabled: selector( $all-toggle-inputs, '[disabled]' ) !global;
  $all-toggle-inputs-required: selector( $all-toggle-inputs, '[required]' ) !global;
  $all-inputs: join( $all-verbage-inputs, $all-toggle-inputs, $all-file-inputs ) !global;
  $all-inputs-hover: selector( $all-inputs, ':hover' ) !global;
  $all-inputs-focus: selector( $all-inputs, ':focus' ) !global;
  $all-inputs-active: selector( $all-inputs, ':active' ) !global;
  $all-inputs-multiple: selector( $all-inputs, '[multiple]' ) !global;
  $all-inputs-disabled: selector( $all-inputs, '[disabled]' ) !global;
  $all-inputs-required: selector( $all-inputs, '[required]' ) !global;
  
}

/// Removes one or more toggle input selectors from the global selector variable `$all-toggle-inputs`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin remove-toggle-inputs( $selectors... ) {
  
  $global: stringify($all-toggle-inputs);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `remove-toggle-inputs` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( contains($global, $selector) ) { $global: remove($global, $selector); }
    
  }
  
  $all-toggle-inputs: selector($global) !global;
  $all-toggle-inputs-hover: selector( $all-toggle-inputs, ':hover' ) !global;
  $all-toggle-inputs-focus: selector( $all-toggle-inputs, ':focus' ) !global;
  $all-toggle-inputs-active: selector( $all-toggle-inputs, ':active' ) !global;
  $all-toggle-inputs-disabled: selector( $all-toggle-inputs, '[disabled]' ) !global;
  $all-toggle-inputs-required: selector( $all-toggle-inputs, '[required]' ) !global;
  $all-inputs: join( $all-verbage-inputs, $all-toggle-inputs, $all-file-inputs ) !global;
  $all-inputs-hover: selector( $all-inputs, ':hover' ) !global;
  $all-inputs-focus: selector( $all-inputs, ':focus' ) !global;
  $all-inputs-active: selector( $all-inputs, ':active' ) !global;
  $all-inputs-multiple: selector( $all-inputs, '[multiple]' ) !global;
  $all-inputs-disabled: selector( $all-inputs, '[disabled]' ) !global;
  $all-inputs-required: selector( $all-inputs, '[required]' ) !global;
  
}

/// Adds one or more new heading selectors to the global selector variable `$all-headings`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin add-headings( $selectors... ) {
  
  $global: stringify($all-headings);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `add-headings` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( not contains($global, $selector) ) { $global: append($global, $selector, comma); }
    
  }
  
  $all-headings: selector($global) !global;
  
}

/// Removes one or more heading selectors from the global selector variable `$all-headings`
///
/// @requires {function} is-string
/// @requires {function} stringify
/// @requires {function} selector
/// @requires {function} contains
/// @param {arglist} $selectors - A list of string selectors
/// @throws 'Function `foo` expects selectors to be a string but `#{$selector}` was given.'
@mixin remove-toggle-inputs( $selectors... ) {
  
  $global: stringify($all-headings);
  
  @each $selector in $selectors {
    
    @if( not is-string($selector) ) {
      
      @error 'Function `remove-headings` expects selectors to be a string but `#{$selector}` was given.';
      
    }
  
    @if( contains($global, $selector) ) { $global: remove($global, $selector); }
    
  }
  
  $all-headings: selector($global) !global;
  
}