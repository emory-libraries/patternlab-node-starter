////
/// @group brandy-comp
////

/// Compares whether two values are equal
///
/// @param {mixed} $a - First value to compare
/// @param {arglist} $b - Second value to compare
/// @returns {boolean}
@function eq( $a, $b ) {
  
  @return $a == $b;
  
}

/// Compares whether two values are not equal
///
/// @param {mixed} $a - First value to compare
/// @param {arglist} $b - Second value to compare
/// @returns {boolean}
@function neq( $a, $b ) {
  
  @return $a != $b;
  
}

/// Compares whether the first value is greater than the second value
///
/// @param {mixed} $a - First value to compare
/// @param {arglist} $b - Second value to compare
/// @returns {boolean}
@function gt( $a, $b ) {
  
  @return $a > $b;
  
}

/// Compares whether the first value is greater than or equal to the second value
///
/// @param {mixed} $a - First value to compare
/// @param {arglist} $b - Second value to compare
/// @returns {boolean}
@function gteq( $a, $b ) {
  
  @return $a >= $b;
  
}

/// Compares whether the first value is less than the second value
///
/// @param {mixed} $a - First value to compare
/// @param {arglist} $b - Second value to compare
/// @returns {boolean}
@function lt( $a, $b ) {
  
  @return $a < $b;
  
}

/// Compares whether the first value is almost equal to the second value
///
/// @requires {function} is-string
/// @requires {function} is-number
/// @requires {function} is-map
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} is-matrix
/// @requires {function} is-boolean
/// @requires {function} char-at
/// @param {mixed} $a - First value to compare
/// @param {arglist} $b - Second value to compare
/// @param {number} $e - Allowed tolerance for errors
/// @returns {boolean}
@function aeq( $a, $b, $t: 1 ) {
  
  // Handle numbers.
  @if( is-number($a) and is-number($b) ) {
    
    // Convert to strings and handle as strings.
    $a: cast-string($a);
    $b: cast-string($b);
    
  }
  
  // Handle matrices.
  @if( is-matrix($a) and is-matrix($b) ) {
    
    // Convert to flat lists and handle as lists.
    $a: flatten($a);
    $b: flatten($b);
    
  }
  
  // Handle strings.
  @if( is-string($a) and is-string($b) ) {
    
    // Log differences.
    $d: abs(str-length($a) - str-length($b));

    // Allow `$t` character differences.
    @for $i from 1 through min(str-length($a), str-length($b)) {
      
      $aa: char-at($a, $i);
      $bb: char-at($b, $i);
      
      @if( $aa != $bb ) { $d: $d + 1; }
      
    }
    
    @if( $d > $t ) { @return false; }
    
  }
  
  // Handle maps.
  @else if( is-map($a) and is-map($b) ) {
    
    // Log differences.
    $d: abs(length(map-keys($a)) - length(map-keys($b)));
    
    // Allow `$t` key-value differences.
    @each $key, $value in $a {
      
      @if( map-has-key($b, $key) and $value != map-get($b, $key) ) { $d: $d + 1; }
      
    }
    
    @if( $d > $t ) { @return false; }
    
  }
  
  // Handle lists.
  @else if( (is-list($a) or is-arglist($b)) and (is-list($b) or is-arglist($b))  ) {
    
    // Log differences.
    $d: abs(length($a) - length($b));
    
    // Allow `$t` item differences.
    @for $i from 1 through min(length($a), length($b)) {
      
      $aa: nth($a, $i);
      $bb: nth($b, $i);
      
      @if( $aa != $bb ) { $d: $d + 1; }
      
    }
    
    @if( $d > $t ) { @return false; }
    
  }
  
  // Handle booleans.
  @else if( is-boolean($a) and is-boolean($b) ) { @return $a == $b; }
  
  // Handle all other unrecognized values or values with mis-matched types.
  @else { @return false; }
  
  @return true;
  
}

/// Compares whether the first value is less than or equal to the second value
///
/// @param {mixed} $a - First value to compare
/// @param {arglist} $b - Second value to compare
/// @returns {boolean}
@function lteq( $a, $b ) {
  
  @return $a <= $b;
  
}

/// Determines if a value is equal to `true`
///
/// @param {mixed} $a - Some value to test
/// @returns {boolean}
@function true( $a ) { @return $a == true; }

/// Determines if a value is equal to `false`
///
/// @param {mixed} $a - Some value to test
/// @returns {boolean}
@function false( $a ) { @return $a == false; }