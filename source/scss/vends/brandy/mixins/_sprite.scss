////
/// @group brandy-sprite
////

/// Extracts an image from a sprite
/// 
/// @requires {function} is-sprite
/// @requires {function} is-string
/// @requires {function} contains
/// @requires {function} sprite-url
/// @requires {function} sprite-position
/// @requires {function} sprite-width
/// @requires {function} sprite-height
/// @param {sprite} $sprite - Some sprite object to extract an image from
/// @param {string} $id - The identifier of the image to be extracted from the sprite object
/// @param {boolean} $repeat [false] - Whether the sprite image should be repeating
/// @throws 'Mixin `sprite-image` expects a sprite for argument `$sprite` but `#{type-of($sprite)}` was given.'
/// @throws 'Mixin `sprite-image` expects a string for argument `$id` but `#{type-of($id)}` was given.'
/// @throws 'Mixin `sprite-image` expects a `true` or `false` for argument `$repeat` but `#{$repeat}` was given.'
@mixin sprite-image( $sprite, $id, $repeat: false ) {
  
  @if( not is-sprite($sprite) ) {
    
    @error 'Mixin `sprite-image` expects a sprite for argument `$sprite` but `#{type-of($sprite)}` was given.';
    
  }
  
  @if( not is-string($id) ) {
    
    @error 'Mixin `sprite-image` expects a string for argument `$id` but `#{type-of($id)}` was given.';
    
  }
  
  @if( not contains(true false, $repeat) ) {
    
    @error 'Mixin `sprite-image` expects a `true` or `false` for argument `$repeat` but `#{$repeat}` was given.';
    
  }
  
  background-image: url( sprite-url($sprite) );
  background-repeat: if( $repeat, repeat, no-repeat );
  background-position: sprite-position($sprite, $id);
  width: sprite-width($sprite);
  height: sprite-height($sprite);
  
}