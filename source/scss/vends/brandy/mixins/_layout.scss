////
/// @group brandy-layout
////

/// Sets top and bottom margin equally
///
/// @param {number} $margin - Some margin size
@mixin margin-y( $margin ){
  
  margin-top: $margin;
  margin-bottom: $margin;
  
}

/// Sets left and right margin equally
///
/// @param {number} $margin - Some margin size
@mixin margin-x( $margin ){
  
  margin-left: $margin;
  margin-right: $margin;
  
}

/// Sets left and right margin to auto, used for centering block-level elements
@mixin margin-center() {
  
  margin-left: auto;
  margin-right: auto;
  
}

/// Sets top and bottom padding equally
///
/// @param {number} $padding - Some padding size
@mixin padding-y( $padding ){
  
  padding-top: $padding;
  padding-bottom: $padding;
  
}

/// Sets left and right padding equally
///
/// @param {number} $padding - Some padding size
@mixin padding-x( $padding ){
  
  padding-left: $padding;
  padding-right: $padding;
  
}

/// Sets top and bottom border equally
///
/// @param {number} $border - Some border setting
@mixin border-y( $border ){
  
  border-top: $border;
  border-bottom: $border;
  
}

/// Sets left and right border equally
///
/// @param {number} $border - Some border setting
@mixin border-x( $border ){
  
  border-left: $border;
  border-right: $border;
  
}

/// A shorthand for absolute positioning
///
/// @requires {mixin} position
/// @param {list | number} $offset - Some `top`, `right`, `bottom`, and `left` values, respectively
@mixin absolute( $offset ) {
  
  @include position($offset, absolute);
  
}

/// A shorthand for relative positioning
///
/// @requires {mixin} position
/// @param {list | number} $offset - Some `top`, `right`, `bottom`, and `left` values, respectively
@mixin relative( $offset ) {
  
  @include position($offset, relative);
  
}

/// A shorthand for fixed positioning
///
/// @requires {mixin} position
/// @param {list | number} $offset - Some `top`, `right`, `bottom`, and `left` values, respectively
@mixin fixed( $offset ) {
  
  @include position($offset, fixed);
  
}

/// Sets `top`, `right`, `bottom`, `left`, and optionally `position` properties in one fell swoop
///
/// @requires {function} is-number
/// @requires {function} first
/// @requires {function} last
/// @requires {function} is-null
/// @param {list | number} $offset - Some `top`, `right`, `bottom`, and `left` values, respectively
/// @param {string} $position [null] - The positioning property for the element
@mixin position( $offset, $position: null ) {
  
  @if( is-number($offset) ) {
    
    top: $offset;
    right: $offset;
    bottom: $offset;
    left: $offset;
    
  }
  
  @else {
  
    @for $i from 1 through length($offset) {

      $value: nth($offset, $i); 

      @if( $i == 1 and not is-null($value) and $value != false ) { top: $value; }
      @if( $i == 2 and not is-null($value) and $value != false ) { right: $value; }
      @if( $i == 3 and not is-null($value) and $value != false ) { bottom: $value; }
      @if( $i == 4 and not is-null($value) and $value != false ) { left: $value; }

    }
    
  }
  
  @if( contains(static relative fixed absolute sticky, $position) ) { position: $position; }
  
}

/// Sets `top`, `bottom`, and optionally `position` properties in one fell swoop
///
/// @requires {function} is-number
/// @requires {function} first
/// @requires {function} last
/// @requires {function} is-null
/// @param {list | number} $offset - Some `top` and  `bottom` values, respectively
/// @param {string} $position [null] - The positioning property for the element
@mixin position-y( $offset, $position: null ) {
  
  @if( is-number($offset) ) {
    
    top: $offset;
    bottom: $offset;
    
  }
  
  @else {
  
    @for $i from 1 through length($offset) {

      $value: nth($offset, $i); 

      @if( $i == 1 and not is-null($value) and $value != false ) { top: $value; }
      @if( $i == 2 and not is-null($value) and $value != false ) { bottom: $value; }

    }
    
  }
  
  @if( contains(static relative fixed absolute sticky, $position) ) { position: $position; }
  
}

/// Sets `left`, `right`, and optionally `position` properties in one fell swoop
///
/// @requires {function} is-number
/// @requires {function} first
/// @requires {function} last
/// @requires {function} is-null
/// @param {list | number} $offset - Some `left` and  `right` values, respectively
/// @param {string} $position [null] - The positioning property for the element
@mixin position-x( $offset, $position: null ) {
  
  @if( is-number($offset) ) {
    
    left: $offset;
    right: $offset;
    
  }
  
  @else {
  
    @for $i from 1 through length($offset) {

      $value: nth($offset, $i); 

      @if( $i == 1 and not is-null($value) and $value != false ) { left: $value; }
      @if( $i == 2 and not is-null($value) and $value != false ) { right: $value; }

    }
    
  }
  
  @if( contains(static relative fixed absolute sticky, $position) ) { position: $position; }
  
}

/// Absolutely centers an element within its container using absolute positioning. 
/// Only works if the container's position is set to `absolute` or `relative`.
@mixin absolute-center-within-container() {
  
  position: absolute;
  display: block;
  left: 50%;
  top: 50%;
  transform: translate3d(-50%, -50%, 0);
  
}

/// Absolutely centers an element horizontally within its container using absolute positioning. 
/// Only works if the container's position is set to `absolute` or `relative`.
@mixin absolute-center-within-container-x() {
  
  position: absolute;
  display: block;
  left: 50%;
  transform: translatex(-50%);
  
}

/// Absolutely centers an element vertically within its container using absolute positioning. 
/// Only works if the container's position is set to `absolute` or `relative`.
@mixin absolute-center-within-container-y() {
  
  position: absolute;
  display: block;
  top: 50%;
  transform: translatey(-50%);
  
}

/// Absolutely centers the contents of an element using the flexbox method
@mixin absolute-center-contents() {
  
  display: flex;
  align-items: center;
  justify-content: center;
  
}

/// Absolutely centers the contents of an element horizontally using the flexbox method
@mixin absolute-center-contents-x() {
  
  display: flex;
  align-items: center;
  
}

/// Absolutely centers the contents of an element vertically using the flexbox method
@mixin absolute-center-contents-y() {
  
  display: flex;
  justify-content: center;
  
}

/// Hides content visually but still makes content accessible to screen readers
///
/// @author Thoughtbot, Inc.
/// @requires {mixin} size
/// @param {boolean} $hide [true] - Whether hide or show the content
/// @throws 'Mixin `visually-hidden` expect `true` or `false` for argument `$hide` but `#{$hide}` was given.'
@mixin visually-hidden( $hide: true ) {
  
  @if( not contains(true false, $hide) ) {
    
    @error 'Mixin `visually-hidden` expect `true` or `false` for argument `$hide` but `#{$hide}` was given.';
    
  }
  
  @if( $hide ) {
    
    border: 0;
    clip: rect(0 0 0 0);
    @include size(1px);
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    
  }
  
  @else {
    
    clip: auto;
    @include size(auto);
    margin: auto;
    overflow: auto;
    position: relative;
    
  }
  
}

/// Hides text visually, for instance, to allow an image to be shown instead
///
/// @author Thoughtbot, Inc.
/// @param {boolean} $hide [true] - Whether to hide or show the content
/// @throws 'Mixin `textually-hidden` expect `true` or `false` for argument `$hide` but `#{$hide}` was given.'
@mixin textually-hidden( $hide: true ) {
  
   @if( not contains(true false, $hide) ) {
    
    @error 'Mixin `textually-hidden` expect `true` or `false` for argument `$hide` but `#{$hide}` was given.';
    
  }
  
  @if( $hide ) {
    
    overflow: hidden;
    text-indent: 101%;
    white-space: nowrap;
    
  }
  
  @else {
    
    overflow: auto;
    text-indent: 0;
    white-space: normal;
    
  }
  
}

/// Adds a clearfix for floated elements
///
/// @author Thoughtbot, Inc.
/// @param {boolean} $before [false] - Whether the clearfix should come `::before` or `::after` the contents of the element
@mixin clearfix( $before: false ) {
  
  $selector: if($before, '::before', '::after');
  
  &#{$selector} {
    content: '';
    clear: both;
    display: block;
  }
  
}

/// Truncates a single line of text with an ellipsis. Properties `overflow`, `white-space`, and `text-overflow` are essential here.
/// Only works on single lines of text. Multiple lines of text must be truncated with a JavaScript-based solution or similar.
///
/// @author Thoughtbot, Inc.
@mixin ellipsis() {
  
  display: inline-block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  
}

// Import John Albin's [normalize-scss](https://github.com/JohnAlbin/normalize-scss)
@import '../vendors/normalize';