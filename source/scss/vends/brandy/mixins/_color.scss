////
/// @group brandy-colors
////

/// Creates a cross-browser linear gradient
///
/// @requires {function} last
/// @requires {function} head
/// @param {arglist} $args - Some arguments defining the gradient
/// @param {string} $important - Sets the `!important` flag if passed in as the last argument
@mixin linear-gradient( $args... /* $important */ ) {
  
  $important: '';
  
  @if( last($args) == '!important' ) { 
    
    $important: last($args);
    $args: join((), head($args), comma);
  
  }

  background-image: -webkit-linear-gradient($args) #{$important};
  background-image: -moz-linear-gradient($args) #{$important};
  background-image: -o-linear-gradient($args) #{$important};
  background-image: linear-gradient($args) #{$important};
  
}

/// Creates a cross-browser layered linear gradient from one or more gradient arguments
///
/// @requires {function} last
/// @requires {function} head
/// @param {arglist} $gradients - One or more argument lists for a gradient
/// @param {string} $important - Sets the `!important` flag if passed in as the last argument
@mixin layered-linear-gradient( $gradients... /* $important */ ) {
  
  $webkit: ();
  $moz: ();
  $o: ();
  $args: ();
  $important: '';
  
  @if( last($args) == '!important' ) { 
    
    $important: last($args);
    $args: join((), head($args), comma);
  
  }
  
  @each $gradient in $gradients {
    
    $args: append($args, unquote('linear-gradient(#{$gradient})'), comma);
    $webkit: append($webkit, unquote('-webkit-linear-gradient(#{$gradient})'), comma);
    $moz: append($moz, unquote('-moz-linear-gradient(#{$gradient})'), comma);
    $o: append($o, unquote('-o-linear-gradient(#{$gradient})'), comma);
    
  }

  background-image: $webkit  #{$important};
  background-image: $moz  #{$important};
  background-image: $o  #{$important};
  background-image: $args  #{$important};
  
}

/// Creates a cross-browser radial gradient
///
/// @requires {function} last
/// @requires {function} head
/// @param {arglist} $args - Some arguments defining the gradient
/// @param {string} $important - Sets the `!important` flag if passed in as the last argument
@mixin radial-gradient( $args... /* $important */ ) {
  
  $important: '';
  
  @if( last($args) == '!important' ) { 
    
    $important: last($args);
    $args: join((), head($args), comma);
  
  }
  
  background-image: -webkit-radial-gradient($args)  #{$important};
  background-image: -moz-radial-gradient($args)  #{$important};
  background-image: -o-radial-gradient($args)  #{$important};
  background-image: radial-gradient($args)  #{$important};
  
}

/// Creates a cross-browser layered radial gradient from one or more gradient arguments
///
/// @requires {function} last
/// @requires {function} head
/// @param {arglist} $gradients - One or more argument lists for a gradient
/// @param {string} $important - Sets the `!important` flag if passed in as the last argument
@mixin layered-radial-gradient( $gradients... /* $important */ ) {
  
  $important: '';
  
  @if( last($args) == '!important' ) { 
    
    $important: last($args);
    $args: join((), head($args), comma);
  
  }
  
  $webkit: ();
  $moz: ();
  $o: ();
  $args: ();
  
  @each $gradient in $gradients {
    
    $args: append($args, unquote('radial-gradient(#{$gradient})'), comma);
    $webkit: append($webkit, unquote('-webkit-radial-gradient(#{$gradient})'), comma);
    $moz: append($moz, unquote('-moz-radial-gradient(#{$gradient})'), comma);
    $o: append($o, unquote('-o-radial-gradient(#{$gradient})'), comma);
    
  }

  background-image: $webkit  #{$important};
  background-image: $moz  #{$important};
  background-image: $o  #{$important};
  background-image: $args  #{$important};
  
}

/// Creates a cross-browser striped background from the given colors, where stripes are evenly distributed
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} first
/// @requires {function} tail
/// @requires {function} contains
/// @requires {function} prepend
/// @requires {function} is-angle
/// @requires {function} is-color
/// @requires {mixin} linear-gradient
/// @param {string} $direction - The preferred direction of the striped background
/// @param {arglist} $colors - One or more colors to create a striped background from
/// @throws 'Mixin `stripes` received invalid value `#{$direction}` for argument `$direction`.'
/// @throws 'Mixin `stripes` expects a list of colors for argument `$colors` but `#{$color}` was given.'
@mixin stripes( $direction, $colors... ) {
  
  @if( is-list($direction) or is-arglist($direction) ) {
    
    @if( first($direction) != 'to' ) {
      
      @error 'Mixin `stripes` received invalid value `#{$direction}` for argument `$direction`.';
      
    }
    
  }
  
  @else if( is-string($direction) ) { 
    
    @if( not contains('left' 'top' 'right' 'bottom' 'to left' 'to top' 'to right' 'to bottom') ) {
    
      @error 'Mixin `stripes` received invalid value `#{$direction}` for argument `$direction`.';
      
    }
    
    @else { $direction: prepend($direction, 'to'); }
    
  }
  
  @else if( not is-angle($direction) ) {
    
    @error 'Mixin `stripes` received invalid value `#{$direction}` for argument `$direction`.';
    
  }
  
  $length: length($colors);
  $percent: 100% / $length;
  $args: ( unquote('#{$direction}') );
  
  @for $i from 1 through $length {
    
    $color: nth($colors, $i);
    
    @if( not is-color($color) ) {
      
      @error 'Mixin `stripes` expects a list of colors for argument `$colors` but `#{$color}` was given.';
      
    }
    
    $args: append($args, $color $percent, comma);
    
    @if( $i > 1 and $length > $i ) {
      
      $percent: $percent + (100% / $length);
    
      $args: append($args, $color $percent, comma);
      
    }
    
  }

  @include linear-gradient($args...);
  
}

/// Creates a cross-browser striped background with `$n` stripes from the given colors
///
/// @requires {function} is-list
/// @requires {function} is-arglist
/// @requires {function} first
/// @requires {function} tail
/// @requires {function} contains
/// @requires {function} prepend
/// @requires {function} is-angle
/// @requires {function} is-color
/// @requires {function} is-number
/// @requires {function} is-integer
/// @requires {variable} $brandy-light-text
/// @requires {mixin} linear-gradient
/// @param {string} $direction - The preferred direction of the striped background
/// @param {number} $n - The number of stripes that are desired, a minimum of `2` must be used
/// @param {arglist} $color1 - The first or main stripe color
/// @param {arglist} $color2 - The second stripe color
/// @throws 'Mixin `n-stripes` received invalid value `#{$direction}` for argument `$direction`.'
/// @throws 'Mixin `n-stripes` expects a number greater than or equal to 2 for argument `$n` but `#{$n}` was given.'
/// @throws 'Mixin `n-stripes` expects a list of colors for argument `$color1` but `#{$color1}` was given.'
/// @throws 'Mixin `n-stripes` expects a list of colors for argument `$color2` but `#{$color2}` was given.'
@mixin n-stripes( $direction, $n, $color1, $color2: $brandy-light-text ) {
  
  @if( is-list($direction) or is-arglist($direction) ) {
    
    @if( first($direction) != 'to' ) {
      
      @error 'Mixin `n-stripes` received invalid value `#{$direction}` for argument `$direction`.';
      
    }
    
  }
  
  @else if( is-string($direction) ) { 
    
    @if( not contains('left' 'top' 'right' 'bottom' 'to left' 'to top' 'to right' 'to bottom') ) {
    
      @error 'Mixin `n-stripes` received invalid value `#{$direction}` for argument `$direction`.';
      
    }
    
    @else { $direction: prepend($direction, 'to'); }
    
  }
  
  @else if( not is-angle($direction) ) {
    
    @error 'Mixin `n-stripes` received invalid value `#{$direction}` for argument `$direction`.';
    
  }
  
  @if( not is-number($n) or not is-integer($n) or $n < 2  ) {
    
    @error 'Mixin `n-stripes` expects an integer greater than or equal to 2 for argument `$n` but `#{$n}` was given.';
    
  }
  
  @if( not is-color($color1) ) {
    
    @error 'Mixin `n-stripes` expects a list of colors for argument `$color1` but `#{$color1}` was given.';
    
  }
  
  @if( not is-color($color2) ) {
    
    @error 'Mixin `n-stripes` expects a list of colors for argument `$color2` but `#{$color2}` was given.';
    
  }
  
  $percent: (100% / $n);
  $args: ( unquote('#{$direction}') );
  
  @for $i from 1 through $n {
    
    $color: if( $i % 2 == 0, $color2, $color1 );
    
    $args: append($args, $color $percent, comma);
    
    @if( $i > 1 and $n > $i ) { 
      
      $percent: $percent + (100% / $n); 
      
      $args: append($args, $color $percent, comma);
    
    }
    
  }

  @include linear-gradient($args...);
  
}