////
/// @group brandy-selects
////

/// Helps to style placeholder text of input boxes on various browsers
///
/// @requires {function} contains
/// @param {list} $vendors - A list of vendor prefixes to use
@mixin placeholder( $vendors: webkit moz ms ){
  
  @if( contains($vendors, webkit) ){ &::-webkit-input-placeholder { @content; } }
  
  @if( contains($vendors, moz) ){  &:-moz-placeholder, &::-moz-placeholder { @content; } }
  
  @if( contains($vendors, ms) ){ &:-ms-input-placeholder { @content; } }
  
  &::placeholder { @content; }
  
}

/// Helps to style spinners inside number input boxes on various browsers
///
/// @requires {function} contains
/// @param {list} $vendors - A list of vendor prefixes to use
@mixin spinner( $vendors: webkit moz ){
  
  @if( contains($vendors, webkit) ){ &::-webkit-inner-spin-button, &::-webkit-outer-spin-button { @content; } }
  
  @if( contains($vendors, moz) ){  & { @content; } }
  
}

/// Helps to select one or more child elements at the start of a parent's list of children
///
/// @author Lucas Bonomi
/// @param {number} $count [1] - The number of the elements to select
@mixin first( $count: 1 ) {
  
  @if( $count == 1 ) { &:first-child { @content; } }
  @else { &:nth-child(-n + #{$count}) { @content; } }
  
}

/// Helps to select one or more child elements at the end of a parent's list of children
///
/// @author Lucas Bonomi
/// @param {number} $count [1] - The number of the elements to select
@mixin last( $count: 1 ) {
  
  @if( $count == 1 ) { &:last-child { @content; } }
  @else { &:nth-last-child(-n + #{$count}) { @content; } }
  
}

/// Helps to select one or more child elements at the start and end of a parent's list of children
///
/// @author Lucas Bonomi
/// @requires {mixin} first
/// @requires {mixin} last
/// @param {number} $count [1] - The number of elements to select
@mixin first-last( $count: 1 ) {
  
  @include first($count) { @content; }
  @include last($count) { @content; }
  
}

/// Helps to select all child elements after the first child descendant of the parent
///
/// @author Lucas Bonomi
/// @param {number} $count [1] - The index of the child to start on from the start of the child list minus the first child
@mixin after-first( $count: 1 ) {
  
  &:nth-child(n + #{$count} + 1) { @content; }
  
}

/// Helps to select all child elements before the last child descendant of the parent
///
/// @author Lucas Bonomi
/// @param {number} $count [1] - The index of the child to start on from the end of the child list minus the last child
@mixin before-last( $count: 1 ) {
  
  &:nth-last-child(n + #{$count} + 1) { @content; }
  
}

/// Helps to select a child element from the start of parent's list of children
///
/// @author Lucas Bonomi
/// @param {number} $count [1] - The index of the child to select from the start of the parent's child list
@mixin from-start( $count: 1 ) {
  
  &:nth-child(#{$count}) { @content; }
  
}

/// Helps to select a child element from the end of parent's list of children
///
/// @author Lucas Bonomi
/// @param {number} $count [1] - The index of the child to select from the end of the parent's child list
@mixin from-end( $count: 1 ) {
  
  &:nth-last-child(#{$count}) { @content; }
  
}

/// Helps to select a child element from the start and end of parent's list of children
///
/// @author Lucas Bonomi
/// @requires {mixin} from-start
/// @requires {mixin} from-end
/// @param {number} $count [1] - The index of the child to select from the top of the parent's child list
@mixin from-start-end( $count: 1 ) {
  
  @include from-start($count) { @content; }
  @include from-end($count) { @content; }
  
}

/// Helps to select all even numbered child elements from a parent's list of children
///
/// @author Lucas Bonomi
@mixin even() {
  
  &:nth-child(even) { @content; }
  
}

/// Helps to select all odd numbered child elements from a parent's list of children
///
/// @author Lucas Bonomi
@mixin odd() {
  
  &:nth-child(odd) { @content; }
  
}

/// Helps to select all child elements between `$first` and `$last` from a parent's list of children
///
/// @author Lucas Bonomi
/// @param {number} $first [1] - The index of the first child element in the parent's child list
/// @param {number} $last [1] - The index of the last child element in the parent's child list
@mixin between( $first: 1, $last: 1 ) {
  
  &:nth-child(n + #{$first}):nth-child(-n + #{$last}) { @content; }
  
}

/// Helps to select all even numbered child elements between `$first` and `$last` from a parent's list of children
///
/// @author Lucas Bonomi
/// @param {number} $first [1] - The index of the first child element in the parent's child list
/// @param {number} $last [1] - The index of the last child element in the parent's child list
@mixin even-between( $first: 1, $last: 1 ) {
  
  &:nth-child(even):&:nth-child(n + #{$first}):nth-child(-n + #{$last}) { @content; }
  
}

/// Helps to select each child element matching the pattern `$n` between `$first` and `$last` from a parent's list of children
///
/// @author Lucas Bonomi
/// @param {number} $n - Some pattern of children to select
/// @param {number} $first [1] - The index of the first child element in the parent's child list
/// @param {number} $last [1] - The index of the last child element in the parent's child list
@mixin each-between( $n: 1, $first: 1, $last: 1 ) {
  
  &:nth-child(#{$n}n):&:nth-child(n + #{$first}):nth-child(-n + #{$last}) { @content; }
  
}

/// Helps to select every child element matching the pattern `$n` between `$first` and `$last` from a parent's list of children
///
/// @author Lucas Bonomi
/// @alias each-between
/// @param {number} $n - Some pattern of children to select
/// @param {number} $first [1] - The index of the first child element in the parent's child list
/// @param {number} $last [1] - The index of the last child element in the parent's child list
@mixin every-between( $n: 1, $first: 1, $last: 1 ) {
  
  @include each-between($n, $first, $last) { @content; };
  
}

/// Helps to select a child element by index from a parent's list of children
///
/// @author Lucas Bonomi
/// @param {number} $index [1] - The index of the child to select from the parent's child list
@mixin child( $index: 1 ) {
  
  &:nth-child(#{$index}) { @content; }
  
}

/// Helps to select a child from a parent's list of children excluding the child at the given index
///
/// @author Lucas Bonomi
/// @param {number} $index [1] - The index of the child to ignore from the parent's child list
@mixin all-but( $index: 1 ) {
  
  &:not(:nth-child(#{$index})) { @content; }
  
}

/// Helps to select a child from a parent's list of children excluding the first and last children
///
/// @author Lucas Bonomi
/// @param {number} $index [1] - The index of the child to select
@mixin all-but-first-last( $index: 1 ) {
  
  &:nth-child(n + #{$index}):nth-last-child(n + #{$index}) { @content; }
  
}

/// Helps to select each child element matching the pattern `$n` from a parent's list of children
///
/// @author Lucas Bonomi
/// @param {number} $n [1] - Some pattern of children to select
@mixin each( $n: 1 ) {
  
  &:nth-child(#{$n}n) { @content; }
  
}

/// Helps to select every child element matching the pattern `$n` from a parent's list of children
///
/// @author Lucas Bonomi
/// @alias each
/// @param {number} $n [1] - Some pattern of children to select
@mixin every( $n: 1 ) {
  
  @include each($n) { @content; };
  
}

/// Helps to select the middle child element (odd) or middle children elements (even) from a parent's list of children, given a child count
/// 
/// @author Lucas Bonomi
/// @param {number} $count - The number of children the parent element should have
@mixin middle( $count ) {
  
  @if( $count % 2 == 0 ) {
    
    &:nth-child(#{round($count / 2)} - 1), &:nth-child(#{round($count / 2)} + 1) { @content; }
    
  }
  
  @else {
    
    &:nth-child(#{round($count / 2)}) { @content; }
    
  }
  
}

/// Helps to select a the last type-specific child from a parent's list of children
///
/// @author Lucas Bonomi
/// @param {number} $limit [1] - Some type limitation
@mixin last-of( $limit: 1 ) {
  
  &:nth-of-type(#{$limit}):nth-last-of-type(1) { @content; }
  
}

/// Helps to select child elements with at least `$x` number of items from a parent's list of children
///
/// @author Lucas Bonomi
/// @requires {function} last
/// @param {number} $x [1] - Some number of items
@mixin at-least( $x: 1 ) {
  
  $selector: &;
  $child: last(last($selector));
  
  &:nth-last-child(n + #{$x}), &:nth-last-child(n + #{$x}) ~ #{$child} { @content; }
  
}

/// Helps to select child elements with at most `$x` number of items from a parent's list of children
///
/// @author Lucas Bonomi
/// @requires {function} last
/// @param {number} $x [1] - Some number of items
@mixin at-most( $x: 1 ) {
  
  $selector: &;
  $child: last(last($selector));
  
  &:nth-last-child(-n + #{$x}):first-child, &:nth-last-child(-n + #{$x}):first-child ~ #{$child} { @content; }
  
}

/// Helps to select child elements with number of items between `$min` and `$max` from a parent's list of children
///
/// @author Lucas Bonomi
/// @requires {function} last
/// @param {number} $min [1] - Minimum number of items
/// @param {number} $max [1] - Maximum number of items
@mixin in-between( $min: 1, $max: 1 ) {
  
  $selector: &;
  $child: last(last($selector));
  
  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child,
  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child ~ #{$child} { 
      @content; 
  }
  
}

/// Helps to select the first exact child element from a parent's list of children
///
/// @author Lucas Bonomi
@mixin first-child() {
  
  &:first-of-type { @content; }
  
}

/// Helps to select the last exact child element from a parent's list of children
///
/// @author Lucas Bonomi
@mixin last-child() {
  
  &:last-of-type { @content; }
  
}

/// Helps to select the first and last exact child elements from a parent's list of children
///
/// @author Lucas Bonomi
/// @requires {mixin} first-child
/// @requires {mixin} last-child
@mixin first-last-child() {
  
  @include first-child { @content; }
  @include last-child { @content; }
  
}

/// Helps to select only child elements that are unique to a parent's list of children
///
/// @author Lucas Bonomi
@mixin unique() {
  
  &:only-child { @content; }
  
}

/// Helps to select only child elements that are unique to a parent's list of children
///
/// @author Lucas Bonomi
/// @alias unique
@mixin only() {
  
  @include unique { @content; }
  
}

/// Helps to select only child elements that are not unique to a parent's list of children
///
/// @author Lucas Bonomi
@mixin not-unique() {
  
  &:not(:only-child) { @content; }
  
}

/// Helps to select only child elements that are not unique to a parent's list of children
///
/// @author Lucas Bonomi
/// @alias not-unique
@mixin not-only() {
  
  @include not-unique { @content; }
  
}

/// Targets an element when it's an immediate child of another element
///
/// @author Hugo Giraudel
/// @param {string | list} $context - Some parent element context
@mixin when-child-of( $context ) {
  
  #{unquote($context)} > & { @content; }
  
}

/// Targets an element when it's an adjacent sibling of another element
///
/// @author Hugo Giraudel
/// @param {string | list} $context - Some adjacent sibling element context
@mixin when-adjacent-sibling-of( $context ) {
  
  #{unquote($context)} + & { @content; }
  
}

/// Targets an element when it's a general sibling of another element
///
/// @author Hugo Giraudel
/// @param {string | list} $context - Some sibling element context
@mixin when-sibling-of( $context ) {
  
  #{unquote($context)} ~ & { @content; }
  
}

/// Targets an element when it's a descendant of another element
///
/// @author Hugo Giraudel
/// @param {string | list} $context - Some ascendant element context
@mixin when-descendant-of( $context ) {
  
  #{unquote($context)} & { @content; }
  
}